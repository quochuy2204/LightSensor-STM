
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08002fc0  08002fc0  00012fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000018c  20000070  080030d8  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001fc  080030d8  000201fc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000df74  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002148  00000000  00000000  0002e014  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000567f  00000000  00000000  0003015c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000948  00000000  00000000  000357e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c50  00000000  00000000  00036128  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004d65  00000000  00000000  00036d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003fe2  00000000  00000000  0003badd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003fabf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001b50  00000000  00000000  0003fb3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002fa8 	.word	0x08002fa8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002fa8 	.word	0x08002fa8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <HAL_InitTick+0x2c>)
{
 8000594:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000596:	6818      	ldr	r0, [r3, #0]
 8000598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059c:	fbb0 f0f3 	udiv	r0, r0, r3
 80005a0:	f000 fcc8 	bl	8000f34 <HAL_SYSTICK_Config>
 80005a4:	4604      	mov	r4, r0
 80005a6:	b938      	cbnz	r0, 80005b8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80005a8:	4602      	mov	r2, r0
 80005aa:	4629      	mov	r1, r5
 80005ac:	f04f 30ff 	mov.w	r0, #4294967295
 80005b0:	f000 fc8c 	bl	8000ecc <HAL_NVIC_SetPriority>
 80005b4:	4620      	mov	r0, r4
 80005b6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80005b8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80005ba:	bd38      	pop	{r3, r4, r5, pc}
 80005bc:	20000008 	.word	0x20000008

080005c0 <HAL_Init>:
{
 80005c0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c2:	2003      	movs	r0, #3
 80005c4:	f000 fc70 	bl	8000ea8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ffe1 	bl	8000590 <HAL_InitTick>
 80005ce:	4604      	mov	r4, r0
 80005d0:	b918      	cbnz	r0, 80005da <HAL_Init+0x1a>
    HAL_MspInit();
 80005d2:	f001 ff7d 	bl	80024d0 <HAL_MspInit>
}
 80005d6:	4620      	mov	r0, r4
 80005d8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80005da:	2401      	movs	r4, #1
 80005dc:	e7fb      	b.n	80005d6 <HAL_Init+0x16>
	...

080005e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80005e0:	4a02      	ldr	r2, [pc, #8]	; (80005ec <HAL_IncTick+0xc>)
 80005e2:	6813      	ldr	r3, [r2, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	2000009c 	.word	0x2000009c

080005f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005f0:	4b01      	ldr	r3, [pc, #4]	; (80005f8 <HAL_GetTick+0x8>)
 80005f2:	6818      	ldr	r0, [r3, #0]
}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	2000009c 	.word	0x2000009c

080005fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005fc:	b538      	push	{r3, r4, r5, lr}
 80005fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff fff6 	bl	80005f0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000604:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000606:	4605      	mov	r5, r0
  {
    wait++;
 8000608:	bf18      	it	ne
 800060a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060c:	f7ff fff0 	bl	80005f0 <HAL_GetTick>
 8000610:	1b40      	subs	r0, r0, r5
 8000612:	4284      	cmp	r4, r0
 8000614:	d8fa      	bhi.n	800060c <HAL_Delay+0x10>
  {
  }
}
 8000616:	bd38      	pop	{r3, r4, r5, pc}

08000618 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000618:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800061a:	0dcc      	lsrs	r4, r1, #23
 800061c:	f004 0404 	and.w	r4, r4, #4
 8000620:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 8000622:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8000626:	2307      	movs	r3, #7
 8000628:	fa03 f501 	lsl.w	r5, r3, r1
 800062c:	5823      	ldr	r3, [r4, r0]
 800062e:	fa02 f101 	lsl.w	r1, r2, r1
 8000632:	ea23 0305 	bic.w	r3, r3, r5
 8000636:	4319      	orrs	r1, r3
 8000638:	5021      	str	r1, [r4, r0]
 800063a:	bd30      	pop	{r4, r5, pc}

0800063c <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800063c:	6880      	ldr	r0, [r0, #8]
}
 800063e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8000642:	4770      	bx	lr

08000644 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000644:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800064a:	4604      	mov	r4, r0
 800064c:	2800      	cmp	r0, #0
 800064e:	d06e      	beq.n	800072e <HAL_ADC_Init+0xea>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000650:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000652:	b925      	cbnz	r5, 800065e <HAL_ADC_Init+0x1a>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000654:	f001 ff54 	bl	8002500 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000658:	65a5      	str	r5, [r4, #88]	; 0x58
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800065a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800065e:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000660:	6883      	ldr	r3, [r0, #8]
 8000662:	0099      	lsls	r1, r3, #2
 8000664:	d465      	bmi.n	8000732 <HAL_ADC_Init+0xee>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000666:	6883      	ldr	r3, [r0, #8]
 8000668:	00da      	lsls	r2, r3, #3
 800066a:	d569      	bpl.n	8000740 <HAL_ADC_Init+0xfc>
 800066c:	6883      	ldr	r3, [r0, #8]
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	d574      	bpl.n	800075c <HAL_ADC_Init+0x118>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000672:	2100      	movs	r1, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000674:	f7ff ffe2 	bl	800063c <LL_ADC_REG_IsConversionOngoing>
  
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000678:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800067a:	f013 0f10 	tst.w	r3, #16
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800067e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if(   ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000680:	d152      	bne.n	8000728 <HAL_ADC_Init+0xe4>
     && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000682:	2800      	cmp	r0, #0
 8000684:	d150      	bne.n	8000728 <HAL_ADC_Init+0xe4>
    ADC_STATE_CLR_SET(hadc->State,
 8000686:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800068a:	f043 0302 	orr.w	r3, r3, #2
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800068e:	6820      	ldr	r0, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8000690:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000692:	6883      	ldr	r3, [r0, #8]
 8000694:	07dd      	lsls	r5, r3, #31
 8000696:	d56b      	bpl.n	8000770 <HAL_ADC_Init+0x12c>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8000698:	68e5      	ldr	r5, [r4, #12]
 800069a:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode)  );
 800069c:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 80006a0:	432b      	orrs	r3, r5
 80006a2:	68a5      	ldr	r5, [r4, #8]
 80006a4:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80006a6:	7e65      	ldrb	r5, [r4, #25]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006a8:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 80006aa:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80006ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80006b2:	bf02      	ittt	eq
 80006b4:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 80006b6:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80006ba:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006c0:	b122      	cbz	r2, 80006cc <HAL_ADC_Init+0x88>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80006c2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80006c4:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80006c8:	432a      	orrs	r2, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80006ca:	4313      	orrs	r3, r2
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 80006cc:	68c5      	ldr	r5, [r0, #12]
 80006ce:	4a40      	ldr	r2, [pc, #256]	; (80007d0 <HAL_ADC_Init+0x18c>)
 80006d0:	402a      	ands	r2, r5
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80006d6:	f7ff ffb1 	bl	800063c <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80006da:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80006dc:	689a      	ldr	r2, [r3, #8]
 80006de:	0712      	lsls	r2, r2, #28
 80006e0:	d552      	bpl.n	8000788 <HAL_ADC_Init+0x144>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80006e2:	6922      	ldr	r2, [r4, #16]
 80006e4:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80006e6:	bf05      	ittet	eq
 80006e8:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 80006ea:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80006ec:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80006ee:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80006f2:	bf06      	itte	eq
 80006f4:	f020 000f 	biceq.w	r0, r0, #15
 80006f8:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80006fa:	f022 020f 	bicne.w	r2, r2, #15
 80006fe:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000700:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000702:	f023 0303 	bic.w	r3, r3, #3
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 800070c:	4608      	mov	r0, r1
 800070e:	b003      	add	sp, #12
 8000710:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8000712:	9b01      	ldr	r3, [sp, #4]
 8000714:	3b01      	subs	r3, #1
 8000716:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8000718:	9b01      	ldr	r3, [sp, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f9      	bne.n	8000712 <HAL_ADC_Init+0xce>
 800071e:	e7a5      	b.n	800066c <HAL_ADC_Init+0x28>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000720:	691a      	ldr	r2, [r3, #16]
 8000722:	f022 0201 	bic.w	r2, r2, #1
 8000726:	e051      	b.n	80007cc <HAL_ADC_Init+0x188>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000728:	f043 0310 	orr.w	r3, r3, #16
 800072c:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 800072e:	2101      	movs	r1, #1
 8000730:	e7ec      	b.n	800070c <HAL_ADC_Init+0xc8>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000732:	6883      	ldr	r3, [r0, #8]
 8000734:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800073c:	6083      	str	r3, [r0, #8]
 800073e:	e792      	b.n	8000666 <HAL_ADC_Init+0x22>
  MODIFY_REG(ADCx->CR,
 8000740:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000742:	4a24      	ldr	r2, [pc, #144]	; (80007d4 <HAL_ADC_Init+0x190>)
 8000744:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6083      	str	r3, [r0, #8]
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <HAL_ADC_Init+0x194>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	fbb3 f3f2 	udiv	r3, r3, r2
 800075a:	e7dc      	b.n	8000716 <HAL_ADC_Init+0xd2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800075c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800075e:	f043 0310 	orr.w	r3, r3, #16
 8000762:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000764:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 800076c:	2101      	movs	r1, #1
 800076e:	e781      	b.n	8000674 <HAL_ADC_Init+0x30>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <HAL_ADC_Init+0x198>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	07db      	lsls	r3, r3, #31
 8000776:	d48f      	bmi.n	8000698 <HAL_ADC_Init+0x54>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000778:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <HAL_ADC_Init+0x19c>)
 800077a:	6865      	ldr	r5, [r4, #4]
 800077c:	6893      	ldr	r3, [r2, #8]
 800077e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000782:	432b      	orrs	r3, r5
 8000784:	6093      	str	r3, [r2, #8]
 8000786:	e787      	b.n	8000698 <HAL_ADC_Init+0x54>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000788:	2800      	cmp	r0, #0
 800078a:	d1aa      	bne.n	80006e2 <HAL_ADC_Init+0x9e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800078c:	68d8      	ldr	r0, [r3, #12]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800078e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000792:	7e25      	ldrb	r5, [r4, #24]
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000794:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000796:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                            |
 800079a:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800079e:	f020 0002 	bic.w	r0, r0, #2
 80007a2:	4302      	orrs	r2, r0
 80007a4:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80007a6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80007aa:	2a01      	cmp	r2, #1
 80007ac:	d1b8      	bne.n	8000720 <HAL_ADC_Init+0xdc>
        MODIFY_REG(hadc->Instance->CFGR2,
 80007ae:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80007b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80007b2:	6918      	ldr	r0, [r3, #16]
 80007b4:	432a      	orrs	r2, r5
 80007b6:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80007b8:	f042 0201 	orr.w	r2, r2, #1
 80007bc:	432a      	orrs	r2, r5
 80007be:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80007c0:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80007c4:	432a      	orrs	r2, r5
 80007c6:	f020 0004 	bic.w	r0, r0, #4
 80007ca:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80007cc:	611a      	str	r2, [r3, #16]
 80007ce:	e788      	b.n	80006e2 <HAL_ADC_Init+0x9e>
 80007d0:	fff0c007 	.word	0xfff0c007
 80007d4:	00030d40 	.word	0x00030d40
 80007d8:	20000008 	.word	0x20000008
 80007dc:	50040000 	.word	0x50040000
 80007e0:	50040300 	.word	0x50040300

080007e4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80007e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80007e6:	6945      	ldr	r5, [r0, #20]
 80007e8:	2d08      	cmp	r5, #8
{
 80007ea:	4604      	mov	r4, r0
 80007ec:	460e      	mov	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80007ee:	d00a      	beq.n	8000806 <HAL_ADC_PollForConversion+0x22>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80007f0:	6803      	ldr	r3, [r0, #0]
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	07dd      	lsls	r5, r3, #31
 80007f6:	d505      	bpl.n	8000804 <HAL_ADC_PollForConversion+0x20>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007f8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80007fa:	f043 0320 	orr.w	r3, r3, #32
 80007fe:	6543      	str	r3, [r0, #84]	; 0x54
      return HAL_ERROR;
 8000800:	2001      	movs	r0, #1
 8000802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000804:	2504      	movs	r5, #4
    }
#endif
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000806:	f7ff fef3 	bl	80005f0 <HAL_GetTick>
 800080a:	4607      	mov	r7, r0
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4215      	tst	r5, r2
 8000812:	d01d      	beq.n	8000850 <HAL_ADC_PollForConversion+0x6c>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000814:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800081a:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800081c:	68da      	ldr	r2, [r3, #12]
 800081e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000822:	d10f      	bne.n	8000844 <HAL_ADC_PollForConversion+0x60>
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
     && (hadc->Init.ContinuousConvMode == DISABLE)
 8000824:	7e62      	ldrb	r2, [r4, #25]
 8000826:	b96a      	cbnz	r2, 8000844 <HAL_ADC_PollForConversion+0x60>
    )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	0711      	lsls	r1, r2, #28
 800082c:	d50a      	bpl.n	8000844 <HAL_ADC_PollForConversion+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800082e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000830:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000834:	6562      	str	r2, [r4, #84]	; 0x54
      
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000836:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000838:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800083a:	bf5e      	ittt	pl
 800083c:	6d62      	ldrpl	r2, [r4, #84]	; 0x54
 800083e:	f042 0201 	orrpl.w	r2, r2, #1
 8000842:	6562      	strpl	r2, [r4, #84]	; 0x54
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8000844:	2d08      	cmp	r5, #8
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000846:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8000848:	d114      	bne.n	8000874 <HAL_ADC_PollForConversion+0x90>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 800084a:	601d      	str	r5, [r3, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800084c:	2000      	movs	r0, #0
 800084e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000850:	1c70      	adds	r0, r6, #1
 8000852:	d0dc      	beq.n	800080e <HAL_ADC_PollForConversion+0x2a>
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000854:	f7ff fecc 	bl	80005f0 <HAL_GetTick>
 8000858:	1bc0      	subs	r0, r0, r7
 800085a:	4286      	cmp	r6, r0
 800085c:	d301      	bcc.n	8000862 <HAL_ADC_PollForConversion+0x7e>
 800085e:	2e00      	cmp	r6, #0
 8000860:	d1d4      	bne.n	800080c <HAL_ADC_PollForConversion+0x28>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000862:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800086a:	2300      	movs	r3, #0
 800086c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_TIMEOUT;
 8000870:	2003      	movs	r0, #3
 8000872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8000874:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 8000878:	d1e8      	bne.n	800084c <HAL_ADC_PollForConversion+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800087a:	220c      	movs	r2, #12
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000880 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000880:	6803      	ldr	r3, [r0, #0]
 8000882:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8000884:	4770      	bx	lr
	...

08000888 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800088e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000892:	2b01      	cmp	r3, #1
{
 8000894:	4605      	mov	r5, r0
 8000896:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8000898:	f000 8150 	beq.w	8000b3c <HAL_ADC_ConfigChannel+0x2b4>
 800089c:	2301      	movs	r3, #1
 800089e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80008a2:	6800      	ldr	r0, [r0, #0]
 80008a4:	f7ff feca 	bl	800063c <LL_ADC_REG_IsConversionOngoing>
 80008a8:	2800      	cmp	r0, #0
 80008aa:	f040 8141 	bne.w	8000b30 <HAL_ADC_ConfigChannel+0x2a8>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80008ae:	684b      	ldr	r3, [r1, #4]
 80008b0:	2b05      	cmp	r3, #5
 80008b2:	d808      	bhi.n	80008c6 <HAL_ADC_ConfigChannel+0x3e>
    {
      switch (sConfig->Rank)
 80008b4:	3b02      	subs	r3, #2
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d838      	bhi.n	800092c <HAL_ADC_ConfigChannel+0xa4>
 80008ba:	e8df f003 	tbb	[pc, r3]
 80008be:	3002      	.short	0x3002
 80008c0:	3432      	.short	0x3432
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80008c2:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80008c4:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80008c6:	6861      	ldr	r1, [r4, #4]
 80008c8:	6828      	ldr	r0, [r5, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80008ca:	098e      	lsrs	r6, r1, #6
 80008cc:	f006 060c 	and.w	r6, r6, #12
 80008d0:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 80008d4:	f001 011f 	and.w	r1, r1, #31
 80008d8:	231f      	movs	r3, #31
 80008da:	fa03 f201 	lsl.w	r2, r3, r1
 80008de:	59f3      	ldr	r3, [r6, r7]
 80008e0:	ea23 0302 	bic.w	r3, r3, r2
 80008e4:	6822      	ldr	r2, [r4, #0]
 80008e6:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80008ea:	408a      	lsls	r2, r1
 80008ec:	4313      	orrs	r3, r2
 80008ee:	51f3      	str	r3, [r6, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80008f0:	f7ff fea4 	bl	800063c <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80008f4:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80008f6:	689a      	ldr	r2, [r3, #8]
 80008f8:	0716      	lsls	r6, r2, #28
 80008fa:	f140 8121 	bpl.w	8000b40 <HAL_ADC_ConfigChannel+0x2b8>
    }
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80008fe:	6828      	ldr	r0, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000900:	6883      	ldr	r3, [r0, #8]
 8000902:	07d9      	lsls	r1, r3, #31
 8000904:	f140 8141 	bpl.w	8000b8a <HAL_ADC_ConfigChannel+0x302>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */
    
    if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000908:	6821      	ldr	r1, [r4, #0]
 800090a:	4bc5      	ldr	r3, [pc, #788]	; (8000c20 <HAL_ADC_ConfigChannel+0x398>)
 800090c:	4219      	tst	r1, r3
 800090e:	f040 80c1 	bne.w	8000a94 <HAL_ADC_ConfigChannel+0x20c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000912:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000914:	2300      	movs	r3, #0
 8000916:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  
  /* Return function status */
  return tmp_hal_status;
}
 800091a:	b003      	add	sp, #12
 800091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800091e:	2312      	movs	r3, #18
 8000920:	e7d0      	b.n	80008c4 <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8000922:	2318      	movs	r3, #24
 8000924:	e7ce      	b.n	80008c4 <HAL_ADC_ConfigChannel+0x3c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8000926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800092a:	e7cb      	b.n	80008c4 <HAL_ADC_ConfigChannel+0x3c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800092c:	2306      	movs	r3, #6
 800092e:	e7c9      	b.n	80008c4 <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000930:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000934:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8000938:	f3c1 6784 	ubfx	r7, r1, #26, #5
 800093c:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 8000940:	2800      	cmp	r0, #0
 8000942:	d13a      	bne.n	80009ba <HAL_ADC_ConfigChannel+0x132>
 8000944:	f3c3 6084 	ubfx	r0, r3, #26, #5
 8000948:	4287      	cmp	r7, r0
 800094a:	f040 8155 	bne.w	8000bf8 <HAL_ADC_ConfigChannel+0x370>
  MODIFY_REG(*preg,
 800094e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000952:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000956:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000958:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 800095c:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8000960:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000964:	bb9f      	cbnz	r7, 80009ce <HAL_ADC_ConfigChannel+0x146>
 8000966:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800096a:	4283      	cmp	r3, r0
 800096c:	f040 8149 	bne.w	8000c02 <HAL_ADC_ConfigChannel+0x37a>
  MODIFY_REG(*preg,
 8000970:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000974:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000976:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000978:	6891      	ldr	r1, [r2, #8]
 800097a:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800097e:	f102 0608 	add.w	r6, r2, #8
 8000982:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000986:	bb77      	cbnz	r7, 80009e6 <HAL_ADC_ConfigChannel+0x15e>
 8000988:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800098c:	4283      	cmp	r3, r0
 800098e:	f040 813f 	bne.w	8000c10 <HAL_ADC_ConfigChannel+0x388>
  MODIFY_REG(*preg,
 8000992:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000996:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000998:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800099a:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800099e:	68d2      	ldr	r2, [r2, #12]
 80009a0:	f3c3 0612 	ubfx	r6, r3, #0, #19
 80009a4:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80009a8:	bb4e      	cbnz	r6, 80009fe <HAL_ADC_ConfigChannel+0x176>
 80009aa:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80009ae:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 80009b0:	bf04      	itt	eq
 80009b2:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80009b6:	6002      	streq	r2, [r0, #0]
 80009b8:	e7a1      	b.n	80008fe <HAL_ADC_ConfigChannel+0x76>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ba:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80009be:	fab0 f080 	clz	r0, r0
 80009c2:	4287      	cmp	r7, r0
 80009c4:	d0c3      	beq.n	800094e <HAL_ADC_ConfigChannel+0xc6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80009c6:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80009ca:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80009ce:	fa93 f3a3 	rbit	r3, r3
 80009d2:	fab3 f383 	clz	r3, r3
 80009d6:	4283      	cmp	r3, r0
 80009d8:	d0ca      	beq.n	8000970 <HAL_ADC_ConfigChannel+0xe8>
 80009da:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80009dc:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009de:	f102 0608 	add.w	r6, r2, #8
 80009e2:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80009e6:	fa93 f3a3 	rbit	r3, r3
 80009ea:	fab3 f383 	clz	r3, r3
 80009ee:	4283      	cmp	r3, r0
 80009f0:	d0cf      	beq.n	8000992 <HAL_ADC_ConfigChannel+0x10a>
 80009f2:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80009f6:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80009f8:	6823      	ldr	r3, [r4, #0]
 80009fa:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80009fe:	fa93 f3a3 	rbit	r3, r3
 8000a02:	fab3 f383 	clz	r3, r3
 8000a06:	e7d2      	b.n	80009ae <HAL_ADC_ConfigChannel+0x126>
 8000a08:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8000a0c:	fab2 f282 	clz	r2, r2
 8000a10:	3201      	adds	r2, #1
 8000a12:	f002 021f 	and.w	r2, r2, #31
 8000a16:	2a09      	cmp	r2, #9
 8000a18:	d910      	bls.n	8000a3c <HAL_ADC_ConfigChannel+0x1b4>
 8000a1a:	fa93 f2a3 	rbit	r2, r3
 8000a1e:	fab2 f282 	clz	r2, r2
 8000a22:	3201      	adds	r2, #1
 8000a24:	0692      	lsls	r2, r2, #26
 8000a26:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 8000a2a:	fa93 f1a3 	rbit	r1, r3
 8000a2e:	fab1 f181 	clz	r1, r1
 8000a32:	3101      	adds	r1, #1
 8000a34:	f001 021f 	and.w	r2, r1, #31
 8000a38:	2101      	movs	r1, #1
 8000a3a:	e017      	b.n	8000a6c <HAL_ADC_ConfigChannel+0x1e4>
 8000a3c:	fa93 f6a3 	rbit	r6, r3
 8000a40:	fab6 f686 	clz	r6, r6
 8000a44:	3601      	adds	r6, #1
 8000a46:	06b6      	lsls	r6, r6, #26
 8000a48:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000a4c:	fa93 f1a3 	rbit	r1, r3
 8000a50:	fab1 f181 	clz	r1, r1
 8000a54:	3101      	adds	r1, #1
 8000a56:	f001 021f 	and.w	r2, r1, #31
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	e0ba      	b.n	8000bd4 <HAL_ADC_ConfigChannel+0x34c>
 8000a5e:	fa93 f1a3 	rbit	r1, r3
 8000a62:	fab1 f181 	clz	r1, r1
 8000a66:	e0bc      	b.n	8000be2 <HAL_ADC_ConfigChannel+0x35a>
 8000a68:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000a6c:	4091      	lsls	r1, r2
 8000a6e:	ea41 0206 	orr.w	r2, r1, r6
 8000a72:	b957      	cbnz	r7, 8000a8a <HAL_ADC_ConfigChannel+0x202>
 8000a74:	0e9b      	lsrs	r3, r3, #26
 8000a76:	3301      	adds	r3, #1
 8000a78:	f003 031f 	and.w	r3, r3, #31
 8000a7c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8000a80:	391e      	subs	r1, #30
 8000a82:	0509      	lsls	r1, r1, #20
 8000a84:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8000a88:	e0b1      	b.n	8000bee <HAL_ADC_ConfigChannel+0x366>
 8000a8a:	fa93 f3a3 	rbit	r3, r3
 8000a8e:	fab3 f383 	clz	r3, r3
 8000a92:	e7f0      	b.n	8000a76 <HAL_ADC_ConfigChannel+0x1ee>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000a94:	4b63      	ldr	r3, [pc, #396]	; (8000c24 <HAL_ADC_ConfigChannel+0x39c>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000a96:	4a64      	ldr	r2, [pc, #400]	; (8000c28 <HAL_ADC_ConfigChannel+0x3a0>)
 8000a98:	6898      	ldr	r0, [r3, #8]
 8000a9a:	4291      	cmp	r1, r2
 8000a9c:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
 8000aa0:	d11d      	bne.n	8000ade <HAL_ADC_ConfigChannel+0x256>
 8000aa2:	0202      	lsls	r2, r0, #8
 8000aa4:	f53f af35 	bmi.w	8000912 <HAL_ADC_ConfigChannel+0x8a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8000aa8:	6829      	ldr	r1, [r5, #0]
 8000aaa:	4a60      	ldr	r2, [pc, #384]	; (8000c2c <HAL_ADC_ConfigChannel+0x3a4>)
 8000aac:	4291      	cmp	r1, r2
 8000aae:	f47f af30 	bne.w	8000912 <HAL_ADC_ConfigChannel+0x8a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ab2:	689a      	ldr	r2, [r3, #8]
 8000ab4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8000ab8:	4322      	orrs	r2, r4
 8000aba:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000abe:	609a      	str	r2, [r3, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000ac0:	4b5b      	ldr	r3, [pc, #364]	; (8000c30 <HAL_ADC_ConfigChannel+0x3a8>)
 8000ac2:	4a5c      	ldr	r2, [pc, #368]	; (8000c34 <HAL_ADC_ConfigChannel+0x3ac>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	fbb3 f2f2 	udiv	r2, r3, r2
 8000aca:	230c      	movs	r3, #12
 8000acc:	4353      	muls	r3, r2
            wait_loop_index--;
 8000ace:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0UL)
 8000ad0:	9b01      	ldr	r3, [sp, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f43f af1d 	beq.w	8000912 <HAL_ADC_ConfigChannel+0x8a>
            wait_loop_index--;
 8000ad8:	9b01      	ldr	r3, [sp, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	e7f7      	b.n	8000ace <HAL_ADC_ConfigChannel+0x246>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000ade:	4a56      	ldr	r2, [pc, #344]	; (8000c38 <HAL_ADC_ConfigChannel+0x3b0>)
 8000ae0:	4291      	cmp	r1, r2
 8000ae2:	d111      	bne.n	8000b08 <HAL_ADC_ConfigChannel+0x280>
 8000ae4:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8000ae8:	f47f af13 	bne.w	8000912 <HAL_ADC_ConfigChannel+0x8a>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000aec:	6829      	ldr	r1, [r5, #0]
 8000aee:	f1a2 42f7 	sub.w	r2, r2, #2071986176	; 0x7b800000
 8000af2:	4291      	cmp	r1, r2
 8000af4:	f47f af0d 	bne.w	8000912 <HAL_ADC_ConfigChannel+0x8a>
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8000afe:	4322      	orrs	r2, r4
 8000b00:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	e705      	b.n	8000914 <HAL_ADC_ConfigChannel+0x8c>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8000b08:	4a4c      	ldr	r2, [pc, #304]	; (8000c3c <HAL_ADC_ConfigChannel+0x3b4>)
 8000b0a:	4291      	cmp	r1, r2
 8000b0c:	f47f af01 	bne.w	8000912 <HAL_ADC_ConfigChannel+0x8a>
 8000b10:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8000b14:	f47f aefd 	bne.w	8000912 <HAL_ADC_ConfigChannel+0x8a>
        if (ADC_VREFINT_INSTANCE(hadc))
 8000b18:	6829      	ldr	r1, [r5, #0]
 8000b1a:	4a44      	ldr	r2, [pc, #272]	; (8000c2c <HAL_ADC_ConfigChannel+0x3a4>)
 8000b1c:	4291      	cmp	r1, r2
 8000b1e:	f47f aef8 	bne.w	8000912 <HAL_ADC_ConfigChannel+0x8a>
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8000b28:	4322      	orrs	r2, r4
 8000b2a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000b2e:	e7e9      	b.n	8000b04 <HAL_ADC_ConfigChannel+0x27c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b30:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8000b32:	f042 0220 	orr.w	r2, r2, #32
 8000b36:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8000b38:	4618      	mov	r0, r3
 8000b3a:	e6eb      	b.n	8000914 <HAL_ADC_ConfigChannel+0x8c>
  __HAL_LOCK(hadc);
 8000b3c:	2002      	movs	r0, #2
 8000b3e:	e6ec      	b.n	800091a <HAL_ADC_ConfigChannel+0x92>
    if (   (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b40:	2800      	cmp	r0, #0
 8000b42:	f47f aedc 	bne.w	80008fe <HAL_ADC_ConfigChannel+0x76>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000b46:	68a2      	ldr	r2, [r4, #8]
 8000b48:	6821      	ldr	r1, [r4, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fd64 	bl	8000618 <LL_ADC_SetChannelSamplingTime>
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000b50:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000b52:	f8d5 e000 	ldr.w	lr, [r5]
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000b5c:	2e04      	cmp	r6, #4
 8000b5e:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 8000b62:	f43f aee5 	beq.w	8000930 <HAL_ADC_ConfigChannel+0xa8>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000b66:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8000b6a:	0048      	lsls	r0, r1, #1
 8000b6c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8000b6e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8000b72:	4081      	lsls	r1, r0
 8000b74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b78:	4319      	orrs	r1, r3
 8000b7a:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8000b7e:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <HAL_ADC_ConfigChannel+0x3b8>)
 8000b80:	4003      	ands	r3, r0
 8000b82:	4319      	orrs	r1, r3
 8000b84:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
 8000b88:	e6b9      	b.n	80008fe <HAL_ADC_ConfigChannel+0x76>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000b8a:	68e6      	ldr	r6, [r4, #12]
 8000b8c:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8000b8e:	4a2d      	ldr	r2, [pc, #180]	; (8000c44 <HAL_ADC_ConfigChannel+0x3bc>)
 8000b90:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8000b94:	f006 0e18 	and.w	lr, r6, #24
 8000b98:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8000b9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	ea21 0107 	bic.w	r1, r1, r7
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000bac:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <HAL_ADC_ConfigChannel+0x3c0>)
 8000bae:	4296      	cmp	r6, r2
 8000bb0:	f47f aeaa 	bne.w	8000908 <HAL_ADC_ConfigChannel+0x80>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1UL) & 0x1FUL), sConfig->SamplingTime);
 8000bb4:	2f00      	cmp	r7, #0
 8000bb6:	f47f af27 	bne.w	8000a08 <HAL_ADC_ConfigChannel+0x180>
 8000bba:	0e9e      	lsrs	r6, r3, #26
 8000bbc:	3601      	adds	r6, #1
 8000bbe:	f006 021f 	and.w	r2, r6, #31
 8000bc2:	2a09      	cmp	r2, #9
 8000bc4:	f04f 0101 	mov.w	r1, #1
 8000bc8:	ea4f 6686 	mov.w	r6, r6, lsl #26
 8000bcc:	f63f af4c 	bhi.w	8000a68 <HAL_ADC_ConfigChannel+0x1e0>
 8000bd0:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	ea41 0206 	orr.w	r2, r1, r6
 8000bda:	2f00      	cmp	r7, #0
 8000bdc:	f47f af3f 	bne.w	8000a5e <HAL_ADC_ConfigChannel+0x1d6>
 8000be0:	0e99      	lsrs	r1, r3, #26
 8000be2:	3101      	adds	r1, #1
 8000be4:	f001 011f 	and.w	r1, r1, #31
 8000be8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000bec:	0509      	lsls	r1, r1, #20
 8000bee:	4311      	orrs	r1, r2
 8000bf0:	68a2      	ldr	r2, [r4, #8]
 8000bf2:	f7ff fd11 	bl	8000618 <LL_ADC_SetChannelSamplingTime>
 8000bf6:	e687      	b.n	8000908 <HAL_ADC_ConfigChannel+0x80>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000bf8:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000bfc:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000c00:	e6b1      	b.n	8000966 <HAL_ADC_ConfigChannel+0xde>
 8000c02:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c04:	6823      	ldr	r3, [r4, #0]
  register const uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c06:	f102 0608 	add.w	r6, r2, #8
 8000c0a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8000c0e:	e6bb      	b.n	8000988 <HAL_ADC_ConfigChannel+0x100>
 8000c10:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000c14:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c16:	6823      	ldr	r3, [r4, #0]
 8000c18:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8000c1c:	e6c5      	b.n	80009aa <HAL_ADC_ConfigChannel+0x122>
 8000c1e:	bf00      	nop
 8000c20:	80080000 	.word	0x80080000
 8000c24:	50040300 	.word	0x50040300
 8000c28:	c7520000 	.word	0xc7520000
 8000c2c:	50040000 	.word	0x50040000
 8000c30:	20000008 	.word	0x20000008
 8000c34:	00030d40 	.word	0x00030d40
 8000c38:	cb840000 	.word	0xcb840000
 8000c3c:	80000001 	.word	0x80000001
 8000c40:	03fff000 	.word	0x03fff000
 8000c44:	0007ffff 	.word	0x0007ffff
 8000c48:	407f0000 	.word	0x407f0000

08000c4c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
  
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c50:	6800      	ldr	r0, [r0, #0]
 8000c52:	f7ff fcf3 	bl	800063c <LL_ADC_REG_IsConversionOngoing>
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c56:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	0715      	lsls	r5, r2, #28
 8000c5c:	d542      	bpl.n	8000ce4 <ADC_ConversionStop+0x98>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (    ((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	0192      	lsls	r2, r2, #6
 8000c62:	d523      	bpl.n	8000cac <ADC_ConversionStop+0x60>
         && (hadc->Init.ContinuousConvMode == ENABLE)
         && (hadc->Init.LowPowerAutoWait == ENABLE)
 8000c64:	8b20      	ldrh	r0, [r4, #24]
 8000c66:	f240 1201 	movw	r2, #257	; 0x101
 8000c6a:	4290      	cmp	r0, r2
 8000c6c:	d11e      	bne.n	8000cac <ADC_ConversionStop+0x60>
 8000c6e:	4a29      	ldr	r2, [pc, #164]	; (8000d14 <ADC_ConversionStop+0xc8>)
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8000c70:	6819      	ldr	r1, [r3, #0]
 8000c72:	064e      	lsls	r6, r1, #25
 8000c74:	d50e      	bpl.n	8000c94 <ADC_ConversionStop+0x48>
        }
        Conversion_Timeout_CPU_cycles ++;
      }
      
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8000c76:	2240      	movs	r2, #64	; 0x40
 8000c78:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8000c7a:	2101      	movs	r1, #1
    
    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fcdd 	bl	800063c <LL_ADC_REG_IsConversionOngoing>
 8000c82:	b118      	cbz	r0, 8000c8c <ADC_ConversionStop+0x40>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8000c84:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000c86:	6893      	ldr	r3, [r2, #8]
 8000c88:	079d      	lsls	r5, r3, #30
 8000c8a:	d52e      	bpl.n	8000cea <ADC_ConversionStop+0x9e>
        }
      }
    }
    
    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8000c8c:	2901      	cmp	r1, #1
 8000c8e:	d10f      	bne.n	8000cb0 <ADC_ConversionStop+0x64>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
        break;
    /* Case ADC_REGULAR_GROUP only*/
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8000c90:	2504      	movs	r5, #4
        break;
 8000c92:	e018      	b.n	8000cc6 <ADC_ConversionStop+0x7a>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8000c94:	3a01      	subs	r2, #1
 8000c96:	d1eb      	bne.n	8000c70 <ADC_ConversionStop+0x24>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
    {
      if((HAL_GetTick()-tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ca0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	65a3      	str	r3, [r4, #88]	; 0x58
        
        return HAL_ERROR;
 8000ca8:	2001      	movs	r0, #1
 8000caa:	bd70      	pop	{r4, r5, r6, pc}
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8000cac:	2902      	cmp	r1, #2
 8000cae:	d1e5      	bne.n	8000c7c <ADC_ConversionStop+0x30>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8000cb0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000cb2:	6893      	ldr	r3, [r2, #8]
 8000cb4:	0718      	lsls	r0, r3, #28
 8000cb6:	d421      	bmi.n	8000cfc <ADC_ConversionStop+0xb0>
    switch(conversion_group_reassigned)
 8000cb8:	2902      	cmp	r1, #2
 8000cba:	d003      	beq.n	8000cc4 <ADC_ConversionStop+0x78>
 8000cbc:	2903      	cmp	r1, #3
 8000cbe:	d1e7      	bne.n	8000c90 <ADC_ConversionStop+0x44>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8000cc0:	250c      	movs	r5, #12
 8000cc2:	e000      	b.n	8000cc6 <ADC_ConversionStop+0x7a>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8000cc4:	2508      	movs	r5, #8
    tickstart = HAL_GetTick();
 8000cc6:	f7ff fc93 	bl	80005f0 <HAL_GetTick>
 8000cca:	4606      	mov	r6, r0
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8000ccc:	6823      	ldr	r3, [r4, #0]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	421d      	tst	r5, r3
 8000cd2:	d101      	bne.n	8000cd8 <ADC_ConversionStop+0x8c>
    }
    
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick()-tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000cd8:	f7ff fc8a 	bl	80005f0 <HAL_GetTick>
 8000cdc:	1b80      	subs	r0, r0, r6
 8000cde:	2805      	cmp	r0, #5
 8000ce0:	d9f4      	bls.n	8000ccc <ADC_ConversionStop+0x80>
 8000ce2:	e7d9      	b.n	8000c98 <ADC_ConversionStop+0x4c>
  if (   (tmp_adc_is_conversion_on_going_regular != 0UL)
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	d1ba      	bne.n	8000c5e <ADC_ConversionStop+0x12>
 8000ce8:	e7f4      	b.n	8000cd4 <ADC_ConversionStop+0x88>
  MODIFY_REG(ADCx->CR,
 8000cea:	6893      	ldr	r3, [r2, #8]
 8000cec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000cf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000cf4:	f043 0310 	orr.w	r3, r3, #16
 8000cf8:	6093      	str	r3, [r2, #8]
 8000cfa:	e7c7      	b.n	8000c8c <ADC_ConversionStop+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000cfc:	6893      	ldr	r3, [r2, #8]
 8000cfe:	079b      	lsls	r3, r3, #30
 8000d00:	d4da      	bmi.n	8000cb8 <ADC_ConversionStop+0x6c>
  MODIFY_REG(ADCx->CR,
 8000d02:	6893      	ldr	r3, [r2, #8]
 8000d04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000d08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d0c:	f043 0320 	orr.w	r3, r3, #32
 8000d10:	6093      	str	r3, [r2, #8]
 8000d12:	e7d1      	b.n	8000cb8 <ADC_ConversionStop+0x6c>
 8000d14:	a3400001 	.word	0xa3400001

08000d18 <ADC_Enable>:
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d18:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d1a:	6893      	ldr	r3, [r2, #8]
{
 8000d1c:	b570      	push	{r4, r5, r6, lr}
 8000d1e:	4604      	mov	r4, r0
 8000d20:	07d8      	lsls	r0, r3, #31
 8000d22:	d501      	bpl.n	8000d28 <ADC_Enable+0x10>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000d24:	2000      	movs	r0, #0
 8000d26:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8000d28:	6891      	ldr	r1, [r2, #8]
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <ADC_Enable+0x64>)
 8000d2c:	4219      	tst	r1, r3
 8000d2e:	d114      	bne.n	8000d5a <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 8000d30:	6893      	ldr	r3, [r2, #8]
 8000d32:	4d13      	ldr	r5, [pc, #76]	; (8000d80 <ADC_Enable+0x68>)
 8000d34:	402b      	ands	r3, r5
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8000d3c:	f7ff fc58 	bl	80005f0 <HAL_GetTick>
 8000d40:	4606      	mov	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8000d42:	6822      	ldr	r2, [r4, #0]
 8000d44:	6813      	ldr	r3, [r2, #0]
 8000d46:	07db      	lsls	r3, r3, #31
 8000d48:	d4ec      	bmi.n	8000d24 <ADC_Enable+0xc>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d4a:	6893      	ldr	r3, [r2, #8]
 8000d4c:	07d9      	lsls	r1, r3, #31
 8000d4e:	d50e      	bpl.n	8000d6e <ADC_Enable+0x56>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000d50:	f7ff fc4e 	bl	80005f0 <HAL_GetTick>
 8000d54:	1b80      	subs	r0, r0, r6
 8000d56:	2802      	cmp	r0, #2
 8000d58:	d9f3      	bls.n	8000d42 <ADC_Enable+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d5a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d5c:	f043 0310 	orr.w	r3, r3, #16
 8000d60:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8000d6e:	6893      	ldr	r3, [r2, #8]
 8000d70:	402b      	ands	r3, r5
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6093      	str	r3, [r2, #8]
 8000d78:	e7ea      	b.n	8000d50 <ADC_Enable+0x38>
 8000d7a:	bf00      	nop
 8000d7c:	8000003f 	.word	0x8000003f
 8000d80:	7fffffc0 	.word	0x7fffffc0

08000d84 <HAL_ADC_Start>:
{
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000d88:	6800      	ldr	r0, [r0, #0]
 8000d8a:	f7ff fc57 	bl	800063c <LL_ADC_REG_IsConversionOngoing>
 8000d8e:	4605      	mov	r5, r0
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d136      	bne.n	8000e02 <HAL_ADC_Start+0x7e>
    __HAL_LOCK(hadc);
 8000d94:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d032      	beq.n	8000e02 <HAL_ADC_Start+0x7e>
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8000da2:	4620      	mov	r0, r4
 8000da4:	f7ff ffb8 	bl	8000d18 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000da8:	bb40      	cbnz	r0, 8000dfc <HAL_ADC_Start+0x78>
      ADC_STATE_CLR_SET(hadc->State,
 8000daa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000dac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000db0:	f023 0301 	bic.w	r3, r3, #1
 8000db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db8:	6563      	str	r3, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000dbc:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dbe:	bf48      	it	mi
 8000dc0:	6da3      	ldrmi	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000dc2:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc); 
 8000dc4:	bf52      	itee	pl
 8000dc6:	65a0      	strpl	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dc8:	f023 0306 	bicmi.w	r3, r3, #6
 8000dcc:	65a3      	strmi	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000dce:	231c      	movs	r3, #28
 8000dd0:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000dd8:	68d3      	ldr	r3, [r2, #12]
 8000dda:	019b      	lsls	r3, r3, #6
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ddc:	bf41      	itttt	mi
 8000dde:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8000de0:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8000de4:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8000de8:	6563      	strmi	r3, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8000dea:	6893      	ldr	r3, [r2, #8]
 8000dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000df0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6093      	str	r3, [r2, #8]
 8000dfa:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 8000dfc:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8000e00:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8000e02:	2002      	movs	r0, #2
}
 8000e04:	bd38      	pop	{r3, r4, r5, pc}

08000e06 <ADC_Disable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8000e06:	6802      	ldr	r2, [r0, #0]
{
 8000e08:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000e0a:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e0c:	6891      	ldr	r1, [r2, #8]
 8000e0e:	07c9      	lsls	r1, r1, #31
 8000e10:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000e12:	f003 0302 	and.w	r3, r3, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e16:	d401      	bmi.n	8000e1c <ADC_Disable+0x16>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e18:	2000      	movs	r0, #0
 8000e1a:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1fb      	bne.n	8000e18 <ADC_Disable+0x12>
    if((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8000e20:	6893      	ldr	r3, [r2, #8]
 8000e22:	f003 030d 	and.w	r3, r3, #13
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d115      	bne.n	8000e56 <ADC_Disable+0x50>
  MODIFY_REG(ADCx->CR,
 8000e2a:	6893      	ldr	r3, [r2, #8]
 8000e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000e3e:	f7ff fbd7 	bl	80005f0 <HAL_GetTick>
 8000e42:	4605      	mov	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	07db      	lsls	r3, r3, #31
 8000e4a:	d5e5      	bpl.n	8000e18 <ADC_Disable+0x12>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e4c:	f7ff fbd0 	bl	80005f0 <HAL_GetTick>
 8000e50:	1b40      	subs	r0, r0, r5
 8000e52:	2802      	cmp	r0, #2
 8000e54:	d9f6      	bls.n	8000e44 <ADC_Disable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e56:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e58:	f043 0310 	orr.w	r3, r3, #16
 8000e5c:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8000e66:	2001      	movs	r0, #1
 8000e68:	bd38      	pop	{r3, r4, r5, pc}

08000e6a <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000e6a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000e6e:	2b01      	cmp	r3, #1
{
 8000e70:	b510      	push	{r4, lr}
 8000e72:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000e74:	d016      	beq.n	8000ea4 <HAL_ADC_Stop+0x3a>
 8000e76:	2301      	movs	r3, #1
 8000e78:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000e7c:	2103      	movs	r1, #3
 8000e7e:	f7ff fee5 	bl	8000c4c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8000e82:	b958      	cbnz	r0, 8000e9c <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8000e84:	4620      	mov	r0, r4
 8000e86:	f7ff ffbe 	bl	8000e06 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8000e8a:	b938      	cbnz	r0, 8000e9c <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8000e8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e92:	f023 0301 	bic.w	r3, r3, #1
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return tmp_hal_status;
 8000ea2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000ea4:	2002      	movs	r0, #2
}
 8000ea6:	bd10      	pop	{r4, pc}

08000ea8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000eaa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000eb0:	041b      	lsls	r3, r3, #16
 8000eb2:	0c1b      	lsrs	r3, r3, #16
 8000eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000eb8:	0200      	lsls	r0, r0, #8
 8000eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000ec2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ec4:	60d3      	str	r3, [r2, #12]
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ece:	b530      	push	{r4, r5, lr}
 8000ed0:	68dc      	ldr	r4, [r3, #12]
 8000ed2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	2b04      	cmp	r3, #4
 8000ede:	bf28      	it	cs
 8000ee0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 0501 	mov.w	r5, #1
 8000ee8:	fa05 f303 	lsl.w	r3, r5, r3
 8000eec:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef0:	bf8c      	ite	hi
 8000ef2:	3c03      	subhi	r4, #3
 8000ef4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef6:	4019      	ands	r1, r3
 8000ef8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efa:	fa05 f404 	lsl.w	r4, r5, r4
 8000efe:	3c01      	subs	r4, #1
 8000f00:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000f02:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	ea42 0201 	orr.w	r2, r2, r1
 8000f08:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	bfaf      	iteee	ge
 8000f0e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	f000 000f 	andlt.w	r0, r0, #15
 8000f16:	4b06      	ldrlt	r3, [pc, #24]	; (8000f30 <HAL_NVIC_SetPriority+0x64>)
 8000f18:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	bfa5      	ittet	ge
 8000f1c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000f20:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000f28:	bd30      	pop	{r4, r5, pc}
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	e000ed14 	.word	0xe000ed14

08000f34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f34:	3801      	subs	r0, #1
 8000f36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f3a:	d20a      	bcs.n	8000f52 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f40:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	21f0      	movs	r1, #240	; 0xf0
 8000f44:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f52:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f64:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f68:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80010c4 <HAL_GPIO_Init+0x164>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f6c:	4a53      	ldr	r2, [pc, #332]	; (80010bc <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f6e:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f70:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00u;
 8000f74:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f76:	9c01      	ldr	r4, [sp, #4]
 8000f78:	40dc      	lsrs	r4, r3
 8000f7a:	d102      	bne.n	8000f82 <HAL_GPIO_Init+0x22>
      }
    }

    position++;
  }
}
 8000f7c:	b005      	add	sp, #20
 8000f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f82:	2401      	movs	r4, #1
 8000f84:	fa04 fa03 	lsl.w	sl, r4, r3
    if (iocurrent != 0x00u)
 8000f88:	9c01      	ldr	r4, [sp, #4]
 8000f8a:	ea14 050a 	ands.w	r5, r4, sl
 8000f8e:	f000 808f 	beq.w	80010b0 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f92:	684c      	ldr	r4, [r1, #4]
 8000f94:	f024 0b10 	bic.w	fp, r4, #16
 8000f98:	f1bb 0f02 	cmp.w	fp, #2
 8000f9c:	d111      	bne.n	8000fc2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3u];
 8000f9e:	08df      	lsrs	r7, r3, #3
 8000fa0:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fa4:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000fa8:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000faa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000fae:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000fb2:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb6:	690e      	ldr	r6, [r1, #16]
 8000fb8:	fa06 f60e 	lsl.w	r6, r6, lr
 8000fbc:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000fc0:	623e      	str	r6, [r7, #32]
 8000fc2:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fc6:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000fc8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fca:	fa07 f70c 	lsl.w	r7, r7, ip
 8000fce:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fd0:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fd4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fd6:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fda:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fde:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe2:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000fe6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe8:	d811      	bhi.n	800100e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000fea:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fec:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ff0:	68ce      	ldr	r6, [r1, #12]
 8000ff2:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000ff6:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000ffa:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ffc:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ffe:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001002:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001006:	409e      	lsls	r6, r3
 8001008:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 800100c:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800100e:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001010:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001012:	688e      	ldr	r6, [r1, #8]
 8001014:	fa06 f60c 	lsl.w	r6, r6, ip
 8001018:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800101a:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 800101c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800101e:	d547      	bpl.n	80010b0 <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001020:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8001024:	f046 0601 	orr.w	r6, r6, #1
 8001028:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 800102c:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8001030:	f023 0703 	bic.w	r7, r3, #3
 8001034:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001038:	f006 0601 	and.w	r6, r6, #1
 800103c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001040:	9603      	str	r6, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001042:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001048:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800104a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800104e:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001052:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001056:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800105a:	d02b      	beq.n	80010b4 <HAL_GPIO_Init+0x154>
 800105c:	4e18      	ldr	r6, [pc, #96]	; (80010c0 <HAL_GPIO_Init+0x160>)
 800105e:	42b0      	cmp	r0, r6
 8001060:	d02a      	beq.n	80010b8 <HAL_GPIO_Init+0x158>
 8001062:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001066:	42b0      	cmp	r0, r6
 8001068:	bf14      	ite	ne
 800106a:	2607      	movne	r6, #7
 800106c:	2602      	moveq	r6, #2
 800106e:	fa06 f60e 	lsl.w	r6, r6, lr
 8001072:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001076:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8001078:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
 800107a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800107c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001080:	bf0c      	ite	eq
 8001082:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001084:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8001086:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8001088:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800108a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 800108e:	bf0c      	ite	eq
 8001090:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001092:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8001094:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8001096:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001098:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800109c:	bf0c      	ite	eq
 800109e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80010a0:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 80010a2:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 80010a4:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010a6:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80010a8:	bf54      	ite	pl
 80010aa:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80010ac:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 80010ae:	60d6      	str	r6, [r2, #12]
    position++;
 80010b0:	3301      	adds	r3, #1
 80010b2:	e760      	b.n	8000f76 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010b4:	2600      	movs	r6, #0
 80010b6:	e7da      	b.n	800106e <HAL_GPIO_Init+0x10e>
 80010b8:	2601      	movs	r6, #1
 80010ba:	e7d8      	b.n	800106e <HAL_GPIO_Init+0x10e>
 80010bc:	40010400 	.word	0x40010400
 80010c0:	48000400 	.word	0x48000400
 80010c4:	40021000 	.word	0x40021000

080010c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	b10a      	cbz	r2, 80010ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ca:	6181      	str	r1, [r0, #24]
 80010cc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ce:	6281      	str	r1, [r0, #40]	; 0x28
 80010d0:	4770      	bx	lr
	...

080010d4 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010d4:	4a02      	ldr	r2, [pc, #8]	; (80010e0 <HAL_PWR_EnableBkUpAccess+0xc>)
 80010d6:	6813      	ldr	r3, [r2, #0]
 80010d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	4770      	bx	lr
 80010e0:	40007000 	.word	0x40007000

080010e4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <HAL_PWREx_GetVoltageRange+0xc>)
 80010e6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80010e8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40007000 	.word	0x40007000

080010f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f6:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010fc:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001100:	d11c      	bne.n	800113c <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001102:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001106:	d015      	beq.n	8001134 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800110e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001112:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001114:	4a10      	ldr	r2, [pc, #64]	; (8001158 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001116:	6811      	ldr	r1, [r2, #0]
 8001118:	2232      	movs	r2, #50	; 0x32
 800111a:	434a      	muls	r2, r1
 800111c:	490f      	ldr	r1, [pc, #60]	; (800115c <HAL_PWREx_ControlVoltageScaling+0x68>)
 800111e:	fbb2 f2f1 	udiv	r2, r2, r1
 8001122:	4619      	mov	r1, r3
 8001124:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001126:	6958      	ldr	r0, [r3, #20]
 8001128:	0540      	lsls	r0, r0, #21
 800112a:	d500      	bpl.n	800112e <HAL_PWREx_ControlVoltageScaling+0x3a>
 800112c:	b922      	cbnz	r2, 8001138 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800112e:	694b      	ldr	r3, [r1, #20]
 8001130:	055b      	lsls	r3, r3, #21
 8001132:	d40d      	bmi.n	8001150 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001134:	2000      	movs	r0, #0
 8001136:	4770      	bx	lr
        wait_loop_index--;
 8001138:	3a01      	subs	r2, #1
 800113a:	e7f4      	b.n	8001126 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800113c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001140:	bf1f      	itttt	ne
 8001142:	681a      	ldrne	r2, [r3, #0]
 8001144:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001148:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 800114c:	601a      	strne	r2, [r3, #0]
 800114e:	e7f1      	b.n	8001134 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001150:	2003      	movs	r0, #3
}
 8001152:	4770      	bx	lr
 8001154:	40007000 	.word	0x40007000
 8001158:	20000008 	.word	0x20000008
 800115c:	000f4240 	.word	0x000f4240

08001160 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001160:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001162:	4d1e      	ldr	r5, [pc, #120]	; (80011dc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001164:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001166:	00da      	lsls	r2, r3, #3
{
 8001168:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800116a:	d518      	bpl.n	800119e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800116c:	f7ff ffba 	bl	80010e4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001170:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001174:	d123      	bne.n	80011be <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001176:	2c80      	cmp	r4, #128	; 0x80
 8001178:	d929      	bls.n	80011ce <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800117a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800117c:	bf8c      	ite	hi
 800117e:	2002      	movhi	r0, #2
 8001180:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001182:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001184:	6813      	ldr	r3, [r2, #0]
 8001186:	f023 0307 	bic.w	r3, r3, #7
 800118a:	4303      	orrs	r3, r0
 800118c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800118e:	6813      	ldr	r3, [r2, #0]
 8001190:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001194:	1a18      	subs	r0, r3, r0
 8001196:	bf18      	it	ne
 8001198:	2001      	movne	r0, #1
 800119a:	b003      	add	sp, #12
 800119c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	65ab      	str	r3, [r5, #88]	; 0x58
 80011a6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80011b0:	f7ff ff98 	bl	80010e4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80011b4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80011b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ba:	65ab      	str	r3, [r5, #88]	; 0x58
 80011bc:	e7d8      	b.n	8001170 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80011be:	2c80      	cmp	r4, #128	; 0x80
 80011c0:	d807      	bhi.n	80011d2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80011c2:	d008      	beq.n	80011d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80011c4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80011c8:	4258      	negs	r0, r3
 80011ca:	4158      	adcs	r0, r3
 80011cc:	e7d9      	b.n	8001182 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80011ce:	2000      	movs	r0, #0
 80011d0:	e7d7      	b.n	8001182 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80011d2:	2003      	movs	r0, #3
 80011d4:	e7d5      	b.n	8001182 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80011d6:	2002      	movs	r0, #2
 80011d8:	e7d3      	b.n	8001182 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40022000 	.word	0x40022000

080011e4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <HAL_RCC_GetSysClockFreq+0x98>)
 80011e6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011e8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011ea:	f012 020c 	ands.w	r2, r2, #12
 80011ee:	d005      	beq.n	80011fc <HAL_RCC_GetSysClockFreq+0x18>
 80011f0:	2a0c      	cmp	r2, #12
 80011f2:	d115      	bne.n	8001220 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011f4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80011f8:	2901      	cmp	r1, #1
 80011fa:	d118      	bne.n	800122e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80011fc:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80011fe:	4820      	ldr	r0, [pc, #128]	; (8001280 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001200:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001202:	bf55      	itete	pl
 8001204:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001208:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800120a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800120e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001212:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001216:	b382      	cbz	r2, 800127a <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001218:	2a0c      	cmp	r2, #12
 800121a:	d009      	beq.n	8001230 <HAL_RCC_GetSysClockFreq+0x4c>
 800121c:	2000      	movs	r0, #0
  return sysclockfreq;
 800121e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001220:	2a04      	cmp	r2, #4
 8001222:	d029      	beq.n	8001278 <HAL_RCC_GetSysClockFreq+0x94>
 8001224:	2a08      	cmp	r2, #8
 8001226:	4817      	ldr	r0, [pc, #92]	; (8001284 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001228:	bf18      	it	ne
 800122a:	2000      	movne	r0, #0
 800122c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800122e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001230:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001232:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001234:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001238:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 800123c:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800123e:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8001242:	d005      	beq.n	8001250 <HAL_RCC_GetSysClockFreq+0x6c>
 8001244:	2903      	cmp	r1, #3
 8001246:	d012      	beq.n	800126e <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001248:	68d9      	ldr	r1, [r3, #12]
 800124a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800124e:	e003      	b.n	8001258 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001250:	68d9      	ldr	r1, [r3, #12]
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001254:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001258:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800125a:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800125e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001262:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001264:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001266:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001268:	fbb0 f0f3 	udiv	r0, r0, r3
 800126c:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800126e:	68d9      	ldr	r1, [r3, #12]
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001272:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8001276:	e7ef      	b.n	8001258 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800127a:	4770      	bx	lr
 800127c:	40021000 	.word	0x40021000
 8001280:	08002ff4 	.word	0x08002ff4
 8001284:	007a1200 	.word	0x007a1200
 8001288:	00f42400 	.word	0x00f42400

0800128c <HAL_RCC_OscConfig>:
{
 800128c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001290:	4605      	mov	r5, r0
 8001292:	b908      	cbnz	r0, 8001298 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8001294:	2001      	movs	r0, #1
 8001296:	e046      	b.n	8001326 <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001298:	4ca8      	ldr	r4, [pc, #672]	; (800153c <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800129a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800129c:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800129e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012a0:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012a2:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012a6:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012aa:	d572      	bpl.n	8001392 <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012ac:	b11e      	cbz	r6, 80012b6 <HAL_RCC_OscConfig+0x2a>
 80012ae:	2e0c      	cmp	r6, #12
 80012b0:	d151      	bne.n	8001356 <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80012b2:	2f01      	cmp	r7, #1
 80012b4:	d14f      	bne.n	8001356 <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	0798      	lsls	r0, r3, #30
 80012ba:	d502      	bpl.n	80012c2 <HAL_RCC_OscConfig+0x36>
 80012bc:	69ab      	ldr	r3, [r5, #24]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0e8      	beq.n	8001294 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	6a28      	ldr	r0, [r5, #32]
 80012c6:	0719      	lsls	r1, r3, #28
 80012c8:	bf56      	itet	pl
 80012ca:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80012ce:	6823      	ldrmi	r3, [r4, #0]
 80012d0:	091b      	lsrpl	r3, r3, #4
 80012d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012d6:	4283      	cmp	r3, r0
 80012d8:	d228      	bcs.n	800132c <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012da:	f7ff ff41 	bl	8001160 <RCC_SetFlashLatencyFromMSIRange>
 80012de:	2800      	cmp	r0, #0
 80012e0:	d1d8      	bne.n	8001294 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e2:	6823      	ldr	r3, [r4, #0]
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	6023      	str	r3, [r4, #0]
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	6a2a      	ldr	r2, [r5, #32]
 80012ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012f2:	4313      	orrs	r3, r2
 80012f4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f6:	6863      	ldr	r3, [r4, #4]
 80012f8:	69ea      	ldr	r2, [r5, #28]
 80012fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80012fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001302:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001304:	f7ff ff6e 	bl	80011e4 <HAL_RCC_GetSysClockFreq>
 8001308:	68a3      	ldr	r3, [r4, #8]
 800130a:	4a8d      	ldr	r2, [pc, #564]	; (8001540 <HAL_RCC_OscConfig+0x2b4>)
 800130c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001310:	5cd3      	ldrb	r3, [r2, r3]
 8001312:	f003 031f 	and.w	r3, r3, #31
 8001316:	40d8      	lsrs	r0, r3
 8001318:	4b8a      	ldr	r3, [pc, #552]	; (8001544 <HAL_RCC_OscConfig+0x2b8>)
 800131a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff f937 	bl	8000590 <HAL_InitTick>
        if(status != HAL_OK)
 8001322:	2800      	cmp	r0, #0
 8001324:	d035      	beq.n	8001392 <HAL_RCC_OscConfig+0x106>
}
 8001326:	b003      	add	sp, #12
 8001328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800132c:	6823      	ldr	r3, [r4, #0]
 800132e:	f043 0308 	orr.w	r3, r3, #8
 8001332:	6023      	str	r3, [r4, #0]
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800133a:	4303      	orrs	r3, r0
 800133c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800133e:	6863      	ldr	r3, [r4, #4]
 8001340:	69ea      	ldr	r2, [r5, #28]
 8001342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001346:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800134a:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800134c:	f7ff ff08 	bl	8001160 <RCC_SetFlashLatencyFromMSIRange>
 8001350:	2800      	cmp	r0, #0
 8001352:	d0d7      	beq.n	8001304 <HAL_RCC_OscConfig+0x78>
 8001354:	e79e      	b.n	8001294 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001356:	69ab      	ldr	r3, [r5, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d03a      	beq.n	80013d2 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 800135c:	6823      	ldr	r3, [r4, #0]
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001364:	f7ff f944 	bl	80005f0 <HAL_GetTick>
 8001368:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	079a      	lsls	r2, r3, #30
 800136e:	d528      	bpl.n	80013c2 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	f043 0308 	orr.w	r3, r3, #8
 8001376:	6023      	str	r3, [r4, #0]
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	6a2a      	ldr	r2, [r5, #32]
 800137c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001380:	4313      	orrs	r3, r2
 8001382:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001384:	6863      	ldr	r3, [r4, #4]
 8001386:	69ea      	ldr	r2, [r5, #28]
 8001388:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800138c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001390:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	682b      	ldr	r3, [r5, #0]
 8001394:	07d8      	lsls	r0, r3, #31
 8001396:	d42d      	bmi.n	80013f4 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	0799      	lsls	r1, r3, #30
 800139c:	d46b      	bmi.n	8001476 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139e:	682b      	ldr	r3, [r5, #0]
 80013a0:	0718      	lsls	r0, r3, #28
 80013a2:	f100 80a0 	bmi.w	80014e6 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a6:	682b      	ldr	r3, [r5, #0]
 80013a8:	0759      	lsls	r1, r3, #29
 80013aa:	f100 80cd 	bmi.w	8001548 <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013ae:	682b      	ldr	r3, [r5, #0]
 80013b0:	0699      	lsls	r1, r3, #26
 80013b2:	f100 8136 	bmi.w	8001622 <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f040 815c 	bne.w	8001676 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 80013be:	2000      	movs	r0, #0
 80013c0:	e7b1      	b.n	8001326 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013c2:	f7ff f915 	bl	80005f0 <HAL_GetTick>
 80013c6:	eba0 0008 	sub.w	r0, r0, r8
 80013ca:	2802      	cmp	r0, #2
 80013cc:	d9cd      	bls.n	800136a <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 80013ce:	2003      	movs	r0, #3
 80013d0:	e7a9      	b.n	8001326 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013da:	f7ff f909 	bl	80005f0 <HAL_GetTick>
 80013de:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	079b      	lsls	r3, r3, #30
 80013e4:	d5d5      	bpl.n	8001392 <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013e6:	f7ff f903 	bl	80005f0 <HAL_GetTick>
 80013ea:	eba0 0008 	sub.w	r0, r0, r8
 80013ee:	2802      	cmp	r0, #2
 80013f0:	d9f6      	bls.n	80013e0 <HAL_RCC_OscConfig+0x154>
 80013f2:	e7ec      	b.n	80013ce <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013f4:	2e08      	cmp	r6, #8
 80013f6:	d003      	beq.n	8001400 <HAL_RCC_OscConfig+0x174>
 80013f8:	2e0c      	cmp	r6, #12
 80013fa:	d108      	bne.n	800140e <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 80013fc:	2f03      	cmp	r7, #3
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	039a      	lsls	r2, r3, #14
 8001404:	d5c8      	bpl.n	8001398 <HAL_RCC_OscConfig+0x10c>
 8001406:	686b      	ldr	r3, [r5, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1c5      	bne.n	8001398 <HAL_RCC_OscConfig+0x10c>
 800140c:	e742      	b.n	8001294 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140e:	686b      	ldr	r3, [r5, #4]
 8001410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001414:	d110      	bne.n	8001438 <HAL_RCC_OscConfig+0x1ac>
 8001416:	6823      	ldr	r3, [r4, #0]
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800141e:	f7ff f8e7 	bl	80005f0 <HAL_GetTick>
 8001422:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001424:	6823      	ldr	r3, [r4, #0]
 8001426:	039b      	lsls	r3, r3, #14
 8001428:	d4b6      	bmi.n	8001398 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800142a:	f7ff f8e1 	bl	80005f0 <HAL_GetTick>
 800142e:	eba0 0008 	sub.w	r0, r0, r8
 8001432:	2864      	cmp	r0, #100	; 0x64
 8001434:	d9f6      	bls.n	8001424 <HAL_RCC_OscConfig+0x198>
 8001436:	e7ca      	b.n	80013ce <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800143c:	d104      	bne.n	8001448 <HAL_RCC_OscConfig+0x1bc>
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001444:	6023      	str	r3, [r4, #0]
 8001446:	e7e6      	b.n	8001416 <HAL_RCC_OscConfig+0x18a>
 8001448:	6822      	ldr	r2, [r4, #0]
 800144a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800144e:	6022      	str	r2, [r4, #0]
 8001450:	6822      	ldr	r2, [r4, #0]
 8001452:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001456:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1e0      	bne.n	800141e <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 800145c:	f7ff f8c8 	bl	80005f0 <HAL_GetTick>
 8001460:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001462:	6823      	ldr	r3, [r4, #0]
 8001464:	0398      	lsls	r0, r3, #14
 8001466:	d597      	bpl.n	8001398 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff f8c2 	bl	80005f0 <HAL_GetTick>
 800146c:	eba0 0008 	sub.w	r0, r0, r8
 8001470:	2864      	cmp	r0, #100	; 0x64
 8001472:	d9f6      	bls.n	8001462 <HAL_RCC_OscConfig+0x1d6>
 8001474:	e7ab      	b.n	80013ce <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001476:	2e04      	cmp	r6, #4
 8001478:	d003      	beq.n	8001482 <HAL_RCC_OscConfig+0x1f6>
 800147a:	2e0c      	cmp	r6, #12
 800147c:	d110      	bne.n	80014a0 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 800147e:	2f02      	cmp	r7, #2
 8001480:	d10e      	bne.n	80014a0 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001482:	6823      	ldr	r3, [r4, #0]
 8001484:	0559      	lsls	r1, r3, #21
 8001486:	d503      	bpl.n	8001490 <HAL_RCC_OscConfig+0x204>
 8001488:	68eb      	ldr	r3, [r5, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	f43f af02 	beq.w	8001294 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	6863      	ldr	r3, [r4, #4]
 8001492:	692a      	ldr	r2, [r5, #16]
 8001494:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001498:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800149c:	6063      	str	r3, [r4, #4]
 800149e:	e77e      	b.n	800139e <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014a0:	68eb      	ldr	r3, [r5, #12]
 80014a2:	b17b      	cbz	r3, 80014c4 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014aa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014ac:	f7ff f8a0 	bl	80005f0 <HAL_GetTick>
 80014b0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b2:	6823      	ldr	r3, [r4, #0]
 80014b4:	055a      	lsls	r2, r3, #21
 80014b6:	d4eb      	bmi.n	8001490 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b8:	f7ff f89a 	bl	80005f0 <HAL_GetTick>
 80014bc:	1bc0      	subs	r0, r0, r7
 80014be:	2802      	cmp	r0, #2
 80014c0:	d9f7      	bls.n	80014b2 <HAL_RCC_OscConfig+0x226>
 80014c2:	e784      	b.n	80013ce <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014cc:	f7ff f890 	bl	80005f0 <HAL_GetTick>
 80014d0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	055b      	lsls	r3, r3, #21
 80014d6:	f57f af62 	bpl.w	800139e <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014da:	f7ff f889 	bl	80005f0 <HAL_GetTick>
 80014de:	1bc0      	subs	r0, r0, r7
 80014e0:	2802      	cmp	r0, #2
 80014e2:	d9f6      	bls.n	80014d2 <HAL_RCC_OscConfig+0x246>
 80014e4:	e773      	b.n	80013ce <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e6:	696b      	ldr	r3, [r5, #20]
 80014e8:	b19b      	cbz	r3, 8001512 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 80014ea:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80014f6:	f7ff f87b 	bl	80005f0 <HAL_GetTick>
 80014fa:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014fc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001500:	079a      	lsls	r2, r3, #30
 8001502:	f53f af50 	bmi.w	80013a6 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff f873 	bl	80005f0 <HAL_GetTick>
 800150a:	1bc0      	subs	r0, r0, r7
 800150c:	2802      	cmp	r0, #2
 800150e:	d9f5      	bls.n	80014fc <HAL_RCC_OscConfig+0x270>
 8001510:	e75d      	b.n	80013ce <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 8001512:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001516:	f023 0301 	bic.w	r3, r3, #1
 800151a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800151e:	f7ff f867 	bl	80005f0 <HAL_GetTick>
 8001522:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001524:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001528:	079b      	lsls	r3, r3, #30
 800152a:	f57f af3c 	bpl.w	80013a6 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152e:	f7ff f85f 	bl	80005f0 <HAL_GetTick>
 8001532:	1bc0      	subs	r0, r0, r7
 8001534:	2802      	cmp	r0, #2
 8001536:	d9f5      	bls.n	8001524 <HAL_RCC_OscConfig+0x298>
 8001538:	e749      	b.n	80013ce <HAL_RCC_OscConfig+0x142>
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	08002fda 	.word	0x08002fda
 8001544:	20000008 	.word	0x20000008
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001548:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800154a:	00d8      	lsls	r0, r3, #3
 800154c:	d429      	bmi.n	80015a2 <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	65a3      	str	r3, [r4, #88]	; 0x58
 8001556:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001560:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001564:	4f71      	ldr	r7, [pc, #452]	; (800172c <HAL_RCC_OscConfig+0x4a0>)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	05d9      	lsls	r1, r3, #23
 800156a:	d51d      	bpl.n	80015a8 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156c:	68ab      	ldr	r3, [r5, #8]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d12b      	bne.n	80015ca <HAL_RCC_OscConfig+0x33e>
 8001572:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800157e:	f7ff f837 	bl	80005f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001582:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001586:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001588:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800158c:	079b      	lsls	r3, r3, #30
 800158e:	d542      	bpl.n	8001616 <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8001590:	f1b8 0f00 	cmp.w	r8, #0
 8001594:	f43f af0b 	beq.w	80013ae <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001598:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800159a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800159e:	65a3      	str	r3, [r4, #88]	; 0x58
 80015a0:	e705      	b.n	80013ae <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 80015a2:	f04f 0800 	mov.w	r8, #0
 80015a6:	e7dd      	b.n	8001564 <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ae:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80015b0:	f7ff f81e 	bl	80005f0 <HAL_GetTick>
 80015b4:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	05da      	lsls	r2, r3, #23
 80015ba:	d4d7      	bmi.n	800156c <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015bc:	f7ff f818 	bl	80005f0 <HAL_GetTick>
 80015c0:	eba0 0009 	sub.w	r0, r0, r9
 80015c4:	2802      	cmp	r0, #2
 80015c6:	d9f6      	bls.n	80015b6 <HAL_RCC_OscConfig+0x32a>
 80015c8:	e701      	b.n	80013ce <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ca:	2b05      	cmp	r3, #5
 80015cc:	d106      	bne.n	80015dc <HAL_RCC_OscConfig+0x350>
 80015ce:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80015da:	e7ca      	b.n	8001572 <HAL_RCC_OscConfig+0x2e6>
 80015dc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80015e0:	f022 0201 	bic.w	r2, r2, #1
 80015e4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80015e8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80015ec:	f022 0204 	bic.w	r2, r2, #4
 80015f0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1c2      	bne.n	800157e <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 80015f8:	f7fe fffa 	bl	80005f0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fc:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001600:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001602:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001606:	0798      	lsls	r0, r3, #30
 8001608:	d5c2      	bpl.n	8001590 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160a:	f7fe fff1 	bl	80005f0 <HAL_GetTick>
 800160e:	1bc0      	subs	r0, r0, r7
 8001610:	4548      	cmp	r0, r9
 8001612:	d9f6      	bls.n	8001602 <HAL_RCC_OscConfig+0x376>
 8001614:	e6db      	b.n	80013ce <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7fe ffeb 	bl	80005f0 <HAL_GetTick>
 800161a:	1bc0      	subs	r0, r0, r7
 800161c:	4548      	cmp	r0, r9
 800161e:	d9b3      	bls.n	8001588 <HAL_RCC_OscConfig+0x2fc>
 8001620:	e6d5      	b.n	80013ce <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001622:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001624:	b19b      	cbz	r3, 800164e <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 8001626:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001632:	f7fe ffdd 	bl	80005f0 <HAL_GetTick>
 8001636:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001638:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800163c:	079a      	lsls	r2, r3, #30
 800163e:	f53f aeba 	bmi.w	80013b6 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001642:	f7fe ffd5 	bl	80005f0 <HAL_GetTick>
 8001646:	1bc0      	subs	r0, r0, r7
 8001648:	2802      	cmp	r0, #2
 800164a:	d9f5      	bls.n	8001638 <HAL_RCC_OscConfig+0x3ac>
 800164c:	e6bf      	b.n	80013ce <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 800164e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 800165a:	f7fe ffc9 	bl	80005f0 <HAL_GetTick>
 800165e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001660:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001664:	079b      	lsls	r3, r3, #30
 8001666:	f57f aea6 	bpl.w	80013b6 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800166a:	f7fe ffc1 	bl	80005f0 <HAL_GetTick>
 800166e:	1bc0      	subs	r0, r0, r7
 8001670:	2802      	cmp	r0, #2
 8001672:	d9f5      	bls.n	8001660 <HAL_RCC_OscConfig+0x3d4>
 8001674:	e6ab      	b.n	80013ce <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001676:	2e0c      	cmp	r6, #12
 8001678:	f43f ae0c 	beq.w	8001294 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800167c:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001684:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001686:	d136      	bne.n	80016f6 <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 8001688:	f7fe ffb2 	bl	80005f0 <HAL_GetTick>
 800168c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	0198      	lsls	r0, r3, #6
 8001692:	d42a      	bmi.n	80016ea <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001694:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001696:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001698:	06db      	lsls	r3, r3, #27
 800169a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800169e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80016a0:	4313      	orrs	r3, r2
 80016a2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80016a4:	3a01      	subs	r2, #1
 80016a6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80016aa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80016ac:	0852      	lsrs	r2, r2, #1
 80016ae:	3a01      	subs	r2, #1
 80016b0:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80016b4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80016b6:	0852      	lsrs	r2, r2, #1
 80016b8:	3a01      	subs	r2, #1
 80016ba:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80016be:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016c6:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016c8:	68e3      	ldr	r3, [r4, #12]
 80016ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ce:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80016d0:	f7fe ff8e 	bl	80005f0 <HAL_GetTick>
 80016d4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	0199      	lsls	r1, r3, #6
 80016da:	f53f ae70 	bmi.w	80013be <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016de:	f7fe ff87 	bl	80005f0 <HAL_GetTick>
 80016e2:	1b40      	subs	r0, r0, r5
 80016e4:	2802      	cmp	r0, #2
 80016e6:	d9f6      	bls.n	80016d6 <HAL_RCC_OscConfig+0x44a>
 80016e8:	e671      	b.n	80013ce <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ea:	f7fe ff81 	bl	80005f0 <HAL_GetTick>
 80016ee:	1b80      	subs	r0, r0, r6
 80016f0:	2802      	cmp	r0, #2
 80016f2:	d9cc      	bls.n	800168e <HAL_RCC_OscConfig+0x402>
 80016f4:	e66b      	b.n	80013ce <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80016fa:	bf5e      	ittt	pl
 80016fc:	68e3      	ldrpl	r3, [r4, #12]
 80016fe:	f023 0303 	bicpl.w	r3, r3, #3
 8001702:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001704:	68e3      	ldr	r3, [r4, #12]
 8001706:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800170a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001710:	f7fe ff6e 	bl	80005f0 <HAL_GetTick>
 8001714:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001716:	6823      	ldr	r3, [r4, #0]
 8001718:	019b      	lsls	r3, r3, #6
 800171a:	f57f ae50 	bpl.w	80013be <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171e:	f7fe ff67 	bl	80005f0 <HAL_GetTick>
 8001722:	1b40      	subs	r0, r0, r5
 8001724:	2802      	cmp	r0, #2
 8001726:	d9f6      	bls.n	8001716 <HAL_RCC_OscConfig+0x48a>
 8001728:	e651      	b.n	80013ce <HAL_RCC_OscConfig+0x142>
 800172a:	bf00      	nop
 800172c:	40007000 	.word	0x40007000

08001730 <HAL_RCC_ClockConfig>:
{
 8001730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001734:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001736:	4604      	mov	r4, r0
 8001738:	b910      	cbnz	r0, 8001740 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800173a:	2001      	movs	r0, #1
 800173c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4a40      	ldr	r2, [pc, #256]	; (8001844 <HAL_RCC_ClockConfig+0x114>)
 8001742:	6813      	ldr	r3, [r2, #0]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	428b      	cmp	r3, r1
 800174a:	d329      	bcc.n	80017a0 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	07d9      	lsls	r1, r3, #31
 8001750:	d431      	bmi.n	80017b6 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001752:	6821      	ldr	r1, [r4, #0]
 8001754:	078a      	lsls	r2, r1, #30
 8001756:	d45b      	bmi.n	8001810 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001758:	4a3a      	ldr	r2, [pc, #232]	; (8001844 <HAL_RCC_ClockConfig+0x114>)
 800175a:	6813      	ldr	r3, [r2, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	429e      	cmp	r6, r3
 8001762:	d35d      	bcc.n	8001820 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001764:	f011 0f04 	tst.w	r1, #4
 8001768:	4d37      	ldr	r5, [pc, #220]	; (8001848 <HAL_RCC_ClockConfig+0x118>)
 800176a:	d164      	bne.n	8001836 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176c:	070b      	lsls	r3, r1, #28
 800176e:	d506      	bpl.n	800177e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001770:	68ab      	ldr	r3, [r5, #8]
 8001772:	6922      	ldr	r2, [r4, #16]
 8001774:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001778:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800177c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800177e:	f7ff fd31 	bl	80011e4 <HAL_RCC_GetSysClockFreq>
 8001782:	68ab      	ldr	r3, [r5, #8]
 8001784:	4a31      	ldr	r2, [pc, #196]	; (800184c <HAL_RCC_ClockConfig+0x11c>)
 8001786:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800178a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800178e:	5cd3      	ldrb	r3, [r2, r3]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	40d8      	lsrs	r0, r3
 8001796:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <HAL_RCC_ClockConfig+0x120>)
 8001798:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800179a:	2000      	movs	r0, #0
 800179c:	f7fe bef8 	b.w	8000590 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a0:	6813      	ldr	r3, [r2, #0]
 80017a2:	f023 0307 	bic.w	r3, r3, #7
 80017a6:	430b      	orrs	r3, r1
 80017a8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	4299      	cmp	r1, r3
 80017b2:	d1c2      	bne.n	800173a <HAL_RCC_ClockConfig+0xa>
 80017b4:	e7ca      	b.n	800174c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b6:	6862      	ldr	r2, [r4, #4]
 80017b8:	4d23      	ldr	r5, [pc, #140]	; (8001848 <HAL_RCC_ClockConfig+0x118>)
 80017ba:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017bc:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017be:	d11b      	bne.n	80017f8 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c4:	d0b9      	beq.n	800173a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017c6:	68ab      	ldr	r3, [r5, #8]
 80017c8:	f023 0303 	bic.w	r3, r3, #3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80017d0:	f7fe ff0e 	bl	80005f0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80017d8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	68ab      	ldr	r3, [r5, #8]
 80017dc:	6862      	ldr	r2, [r4, #4]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80017e6:	d0b4      	beq.n	8001752 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7fe ff02 	bl	80005f0 <HAL_GetTick>
 80017ec:	1bc0      	subs	r0, r0, r7
 80017ee:	4540      	cmp	r0, r8
 80017f0:	d9f3      	bls.n	80017da <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 80017f2:	2003      	movs	r0, #3
}
 80017f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f8:	2a02      	cmp	r2, #2
 80017fa:	d102      	bne.n	8001802 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001800:	e7e0      	b.n	80017c4 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001802:	b912      	cbnz	r2, 800180a <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001804:	f013 0f02 	tst.w	r3, #2
 8001808:	e7dc      	b.n	80017c4 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800180a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800180e:	e7d9      	b.n	80017c4 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <HAL_RCC_ClockConfig+0x118>)
 8001812:	68a0      	ldr	r0, [r4, #8]
 8001814:	6893      	ldr	r3, [r2, #8]
 8001816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800181a:	4303      	orrs	r3, r0
 800181c:	6093      	str	r3, [r2, #8]
 800181e:	e79b      	b.n	8001758 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001820:	6813      	ldr	r3, [r2, #0]
 8001822:	f023 0307 	bic.w	r3, r3, #7
 8001826:	4333      	orrs	r3, r6
 8001828:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	6813      	ldr	r3, [r2, #0]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	429e      	cmp	r6, r3
 8001832:	d182      	bne.n	800173a <HAL_RCC_ClockConfig+0xa>
 8001834:	e796      	b.n	8001764 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001836:	68ab      	ldr	r3, [r5, #8]
 8001838:	68e2      	ldr	r2, [r4, #12]
 800183a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800183e:	4313      	orrs	r3, r2
 8001840:	60ab      	str	r3, [r5, #8]
 8001842:	e793      	b.n	800176c <HAL_RCC_ClockConfig+0x3c>
 8001844:	40022000 	.word	0x40022000
 8001848:	40021000 	.word	0x40021000
 800184c:	08002fda 	.word	0x08002fda
 8001850:	20000008 	.word	0x20000008

08001854 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001856:	4a06      	ldr	r2, [pc, #24]	; (8001870 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001862:	6810      	ldr	r0, [r2, #0]
 8001864:	f003 031f 	and.w	r3, r3, #31
}
 8001868:	40d8      	lsrs	r0, r3
 800186a:	4770      	bx	lr
 800186c:	40021000 	.word	0x40021000
 8001870:	08002fea 	.word	0x08002fea
 8001874:	20000008 	.word	0x20000008

08001878 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_RCC_GetPCLK2Freq+0x18>)
 800187a:	4a06      	ldr	r2, [pc, #24]	; (8001894 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001882:	5cd3      	ldrb	r3, [r2, r3]
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001886:	6810      	ldr	r0, [r2, #0]
 8001888:	f003 031f 	and.w	r3, r3, #31
}
 800188c:	40d8      	lsrs	r0, r3
 800188e:	4770      	bx	lr
 8001890:	40021000 	.word	0x40021000
 8001894:	08002fea 	.word	0x08002fea
 8001898:	20000008 	.word	0x20000008

0800189c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800189e:	4b44      	ldr	r3, [pc, #272]	; (80019b0 <RCCEx_PLLSAI1_Config+0x114>)
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	f012 0f03 	tst.w	r2, #3
{
 80018a6:	4605      	mov	r5, r0
 80018a8:	460e      	mov	r6, r1
 80018aa:	461c      	mov	r4, r3
 80018ac:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80018ae:	d039      	beq.n	8001924 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	f002 0203 	and.w	r2, r2, #3
 80018b6:	4282      	cmp	r2, r0
 80018b8:	d14b      	bne.n	8001952 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 80018ba:	2a00      	cmp	r2, #0
 80018bc:	d049      	beq.n	8001952 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80018be:	68db      	ldr	r3, [r3, #12]
       ||
 80018c0:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80018c2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80018c6:	3301      	adds	r3, #1
       ||
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d142      	bne.n	8001952 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80018cc:	6823      	ldr	r3, [r4, #0]
 80018ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80018d2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018d4:	f7fe fe8c 	bl	80005f0 <HAL_GetTick>
 80018d8:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	011a      	lsls	r2, r3, #4
 80018de:	d441      	bmi.n	8001964 <RCCEx_PLLSAI1_Config+0xc8>
 80018e0:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80018e2:	2e00      	cmp	r6, #0
 80018e4:	d045      	beq.n	8001972 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80018e6:	2e01      	cmp	r6, #1
 80018e8:	d14f      	bne.n	800198a <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80018ea:	6922      	ldr	r2, [r4, #16]
 80018ec:	6928      	ldr	r0, [r5, #16]
 80018ee:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80018f2:	0840      	lsrs	r0, r0, #1
 80018f4:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80018f8:	3801      	subs	r0, #1
 80018fa:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80018fe:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001902:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800190a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7fe fe70 	bl	80005f0 <HAL_GetTick>
 8001910:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	d545      	bpl.n	80019a4 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001918:	6923      	ldr	r3, [r4, #16]
 800191a:	69aa      	ldr	r2, [r5, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	6123      	str	r3, [r4, #16]
 8001920:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8001924:	2802      	cmp	r0, #2
 8001926:	d010      	beq.n	800194a <RCCEx_PLLSAI1_Config+0xae>
 8001928:	2803      	cmp	r0, #3
 800192a:	d014      	beq.n	8001956 <RCCEx_PLLSAI1_Config+0xba>
 800192c:	2801      	cmp	r0, #1
 800192e:	d110      	bne.n	8001952 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	079f      	lsls	r7, r3, #30
 8001934:	d5f5      	bpl.n	8001922 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001936:	68e3      	ldr	r3, [r4, #12]
 8001938:	686a      	ldr	r2, [r5, #4]
 800193a:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800193e:	3a01      	subs	r2, #1
 8001940:	4318      	orrs	r0, r3
 8001942:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001946:	60e0      	str	r0, [r4, #12]
 8001948:	e7c0      	b.n	80018cc <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001950:	d1f1      	bne.n	8001936 <RCCEx_PLLSAI1_Config+0x9a>
 8001952:	2001      	movs	r0, #1
 8001954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	0391      	lsls	r1, r2, #14
 800195a:	d4ec      	bmi.n	8001936 <RCCEx_PLLSAI1_Config+0x9a>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001962:	e7f5      	b.n	8001950 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001964:	f7fe fe44 	bl	80005f0 <HAL_GetTick>
 8001968:	1bc0      	subs	r0, r0, r7
 800196a:	2802      	cmp	r0, #2
 800196c:	d9b5      	bls.n	80018da <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800196e:	2003      	movs	r0, #3
 8001970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001972:	6922      	ldr	r2, [r4, #16]
 8001974:	68e9      	ldr	r1, [r5, #12]
 8001976:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 800197a:	06c9      	lsls	r1, r1, #27
 800197c:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8001980:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001984:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001986:	6123      	str	r3, [r4, #16]
 8001988:	e7bc      	b.n	8001904 <RCCEx_PLLSAI1_Config+0x68>
 800198a:	6923      	ldr	r3, [r4, #16]
 800198c:	6968      	ldr	r0, [r5, #20]
 800198e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001992:	0840      	lsrs	r0, r0, #1
 8001994:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001998:	3801      	subs	r0, #1
 800199a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800199e:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80019a2:	e7f0      	b.n	8001986 <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80019a4:	f7fe fe24 	bl	80005f0 <HAL_GetTick>
 80019a8:	1b80      	subs	r0, r0, r6
 80019aa:	2802      	cmp	r0, #2
 80019ac:	d9b1      	bls.n	8001912 <RCCEx_PLLSAI1_Config+0x76>
 80019ae:	e7de      	b.n	800196e <RCCEx_PLLSAI1_Config+0xd2>
 80019b0:	40021000 	.word	0x40021000

080019b4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80019b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80019b8:	6805      	ldr	r5, [r0, #0]
 80019ba:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 80019be:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80019c0:	d00e      	beq.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80019c2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80019c4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80019c8:	d053      	beq.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80019ca:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80019ce:	d055      	beq.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0xc8>
 80019d0:	2900      	cmp	r1, #0
 80019d2:	d15e      	bne.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0xde>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80019d4:	3004      	adds	r0, #4
 80019d6:	f7ff ff61 	bl	800189c <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 80019da:	4605      	mov	r5, r0
 80019dc:	2800      	cmp	r0, #0
 80019de:	d04d      	beq.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0xc8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	039e      	lsls	r6, r3, #14
 80019e4:	d563      	bpl.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019e6:	4e93      	ldr	r6, [pc, #588]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80019e8:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80019ea:	00d8      	lsls	r0, r3, #3
 80019ec:	f140 8116 	bpl.w	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x268>
    FlagStatus       pwrclkchanged = RESET;
 80019f0:	2700      	movs	r7, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019f2:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8001c38 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80019f6:	f8d8 3000 	ldr.w	r3, [r8]
 80019fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fe:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8001a02:	f7fe fdf5 	bl	80005f0 <HAL_GetTick>
 8001a06:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001a08:	f8d8 3000 	ldr.w	r3, [r8]
 8001a0c:	05d9      	lsls	r1, r3, #23
 8001a0e:	d542      	bpl.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    if(ret == HAL_OK)
 8001a10:	2d00      	cmp	r5, #0
 8001a12:	d147      	bne.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a14:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a18:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001a1c:	d014      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8001a1e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d011      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x94>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a24:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a28:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001a2c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a30:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a34:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a40:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001a44:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a48:	07da      	lsls	r2, r3, #31
 8001a4a:	d509      	bpl.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0xac>
        tickstart = HAL_GetTick();
 8001a4c:	f7fe fdd0 	bl	80005f0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a50:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001a54:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a56:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001a5a:	079b      	lsls	r3, r3, #30
 8001a5c:	f140 80c0 	bpl.w	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a60:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001a64:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001a70:	e018      	b.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001a72:	4a70      	ldr	r2, [pc, #448]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001a74:	68d3      	ldr	r3, [r2, #12]
 8001a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7a:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a7c:	4a6d      	ldr	r2, [pc, #436]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001a7e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001a80:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001a84:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a88:	430b      	orrs	r3, r1
 8001a8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001a8e:	2500      	movs	r5, #0
 8001a90:	e7a6      	b.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8001a92:	2501      	movs	r5, #1
 8001a94:	e7a4      	b.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a96:	f7fe fdab 	bl	80005f0 <HAL_GetTick>
 8001a9a:	eba0 0009 	sub.w	r0, r0, r9
 8001a9e:	2802      	cmp	r0, #2
 8001aa0:	d9b2      	bls.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x54>
        ret = HAL_TIMEOUT;
 8001aa2:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001aa4:	b11f      	cbz	r7, 8001aae <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa6:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aac:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	07df      	lsls	r7, r3, #31
 8001ab2:	d508      	bpl.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ab4:	495f      	ldr	r1, [pc, #380]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ab6:	6a20      	ldr	r0, [r4, #32]
 8001ab8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001abc:	f022 0203 	bic.w	r2, r2, #3
 8001ac0:	4302      	orrs	r2, r0
 8001ac2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ac6:	079e      	lsls	r6, r3, #30
 8001ac8:	d508      	bpl.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x128>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001aca:	495a      	ldr	r1, [pc, #360]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001acc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001ace:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ad2:	f022 020c 	bic.w	r2, r2, #12
 8001ad6:	4302      	orrs	r2, r0
 8001ad8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001adc:	0698      	lsls	r0, r3, #26
 8001ade:	d508      	bpl.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ae0:	4954      	ldr	r1, [pc, #336]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ae2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001ae4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ae8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001aec:	4302      	orrs	r2, r0
 8001aee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001af2:	0599      	lsls	r1, r3, #22
 8001af4:	d508      	bpl.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001af6:	494f      	ldr	r1, [pc, #316]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001af8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001afa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001afe:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001b02:	4302      	orrs	r2, r0
 8001b04:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001b08:	055a      	lsls	r2, r3, #21
 8001b0a:	d508      	bpl.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x16a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001b0c:	4949      	ldr	r1, [pc, #292]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b0e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001b10:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001b14:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001b18:	4302      	orrs	r2, r0
 8001b1a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b1e:	065f      	lsls	r7, r3, #25
 8001b20:	d508      	bpl.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b22:	4944      	ldr	r1, [pc, #272]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001b26:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001b2a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001b2e:	4302      	orrs	r2, r0
 8001b30:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b34:	05de      	lsls	r6, r3, #23
 8001b36:	d508      	bpl.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001b38:	493e      	ldr	r1, [pc, #248]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b3a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001b3c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001b40:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001b44:	4302      	orrs	r2, r0
 8001b46:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001b4a:	0498      	lsls	r0, r3, #18
 8001b4c:	d50f      	bpl.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b4e:	4a39      	ldr	r2, [pc, #228]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b50:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001b52:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b56:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001b5a:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001b5c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001b64:	d144      	bne.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b66:	68d3      	ldr	r3, [r2, #12]
 8001b68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b6c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	0359      	lsls	r1, r3, #13
 8001b72:	d50f      	bpl.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001b74:	4a2f      	ldr	r2, [pc, #188]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b76:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001b78:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b7c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001b80:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001b82:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001b86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001b8a:	d13c      	bne.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b8c:	68d3      	ldr	r3, [r2, #12]
 8001b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b92:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	045a      	lsls	r2, r3, #17
 8001b98:	d512      	bpl.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b9a:	4926      	ldr	r1, [pc, #152]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b9c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001b9e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001ba2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001ba6:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001ba8:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001bb0:	d106      	bne.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	1d20      	adds	r0, r4, #4
 8001bb6:	f7ff fe71 	bl	800189c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001bba:	2800      	cmp	r0, #0
 8001bbc:	bf18      	it	ne
 8001bbe:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	041b      	lsls	r3, r3, #16
 8001bc4:	d508      	bpl.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001bc6:	4a1b      	ldr	r2, [pc, #108]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001bc8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001bca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001bce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001bd2:	430b      	orrs	r3, r1
 8001bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001bd8:	4628      	mov	r0, r5
 8001bda:	b003      	add	sp, #12
 8001bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be0:	f7fe fd06 	bl	80005f0 <HAL_GetTick>
 8001be4:	eba0 0008 	sub.w	r0, r0, r8
 8001be8:	4548      	cmp	r0, r9
 8001bea:	f67f af34 	bls.w	8001a56 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001bee:	e758      	b.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0xee>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001bf0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001bf4:	d1bb      	bne.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	1d20      	adds	r0, r4, #4
 8001bfa:	f7ff fe4f 	bl	800189c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	bf18      	it	ne
 8001c02:	4605      	movne	r5, r0
 8001c04:	e7b3      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001c06:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001c0a:	d1c3      	bne.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	1d20      	adds	r0, r4, #4
 8001c10:	f7ff fe44 	bl	800189c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001c14:	2800      	cmp	r0, #0
 8001c16:	bf18      	it	ne
 8001c18:	4605      	movne	r5, r0
 8001c1a:	e7bb      	b.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1c:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c22:	65b3      	str	r3, [r6, #88]	; 0x58
 8001c24:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c2e:	2701      	movs	r7, #1
 8001c30:	e6df      	b.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40007000 	.word	0x40007000

08001c3c <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8001c3c:	4a02      	ldr	r2, [pc, #8]	; (8001c48 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8001c3e:	6813      	ldr	r3, [r2, #0]
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4770      	bx	lr
 8001c48:	40021000 	.word	0x40021000

08001c4c <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8001c4c:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c4e:	69c1      	ldr	r1, [r0, #28]
{
 8001c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c52:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c54:	6883      	ldr	r3, [r0, #8]
 8001c56:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c58:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c5a:	4303      	orrs	r3, r0
 8001c5c:	6960      	ldr	r0, [r4, #20]
 8001c5e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c60:	4882      	ldr	r0, [pc, #520]	; (8001e6c <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c62:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c64:	4028      	ands	r0, r5
 8001c66:	4303      	orrs	r3, r0
 8001c68:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c6a:	6853      	ldr	r3, [r2, #4]
 8001c6c:	68e0      	ldr	r0, [r4, #12]
 8001c6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c72:	4303      	orrs	r3, r0
 8001c74:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001c76:	4b7e      	ldr	r3, [pc, #504]	; (8001e70 <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c78:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001c7a:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001c7c:	bf1c      	itt	ne
 8001c7e:	6a23      	ldrne	r3, [r4, #32]
 8001c80:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c82:	6893      	ldr	r3, [r2, #8]
 8001c84:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001c88:	4303      	orrs	r3, r0
 8001c8a:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c8c:	4b79      	ldr	r3, [pc, #484]	; (8001e74 <UART_SetConfig+0x228>)
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d114      	bne.n	8001cbc <UART_SetConfig+0x70>
 8001c92:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001c96:	4a78      	ldr	r2, [pc, #480]	; (8001e78 <UART_SetConfig+0x22c>)
 8001c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9c:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ca0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001ca4:	5cd3      	ldrb	r3, [r2, r3]
 8001ca6:	f040 80aa 	bne.w	8001dfe <UART_SetConfig+0x1b2>
  {
    switch (clocksource)
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d820      	bhi.n	8001cf0 <UART_SetConfig+0xa4>
 8001cae:	e8df f003 	tbb	[pc, r3]
 8001cb2:	8f77      	.short	0x8f77
 8001cb4:	1f9b1f92 	.word	0x1f9b1f92
 8001cb8:	1f1f      	.short	0x1f1f
 8001cba:	9e          	.byte	0x9e
 8001cbb:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cbc:	4b6f      	ldr	r3, [pc, #444]	; (8001e7c <UART_SetConfig+0x230>)
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d107      	bne.n	8001cd2 <UART_SetConfig+0x86>
 8001cc2:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001cc6:	4a6e      	ldr	r2, [pc, #440]	; (8001e80 <UART_SetConfig+0x234>)
 8001cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	e7e6      	b.n	8001ca0 <UART_SetConfig+0x54>
 8001cd2:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <UART_SetConfig+0x224>)
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	f040 80c2 	bne.w	8001e5e <UART_SetConfig+0x212>
 8001cda:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001cde:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001ce2:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8001ce6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001cea:	d02a      	beq.n	8001d42 <UART_SetConfig+0xf6>
 8001cec:	d806      	bhi.n	8001cfc <UART_SetConfig+0xb0>
 8001cee:	b315      	cbz	r5, 8001d36 <UART_SetConfig+0xea>
        ret = HAL_ERROR;
 8001cf0:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001cf6:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cfc:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001d00:	d006      	beq.n	8001d10 <UART_SetConfig+0xc4>
 8001d02:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8001d06:	d1f3      	bne.n	8001cf0 <UART_SetConfig+0xa4>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001d08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d0c:	2508      	movs	r5, #8
 8001d0e:	e001      	b.n	8001d14 <UART_SetConfig+0xc8>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001d10:	485c      	ldr	r0, [pc, #368]	; (8001e84 <UART_SetConfig+0x238>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d12:	2502      	movs	r5, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8001d14:	6862      	ldr	r2, [r4, #4]
 8001d16:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8001d1a:	4283      	cmp	r3, r0
 8001d1c:	d8e8      	bhi.n	8001cf0 <UART_SetConfig+0xa4>
 8001d1e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001d22:	d8e5      	bhi.n	8001cf0 <UART_SetConfig+0xa4>
        switch (clocksource)
 8001d24:	2d08      	cmp	r5, #8
 8001d26:	d838      	bhi.n	8001d9a <UART_SetConfig+0x14e>
 8001d28:	e8df f005 	tbb	[pc, r5]
 8001d2c:	3726370f 	.word	0x3726370f
 8001d30:	3737372e 	.word	0x3737372e
 8001d34:	31          	.byte	0x31
 8001d35:	00          	.byte	0x00
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001d36:	f7ff fd8d 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d1ea      	bne.n	8001d14 <UART_SetConfig+0xc8>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	e7d7      	b.n	8001cf2 <UART_SetConfig+0xa6>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001d42:	f7ff fa4f 	bl	80011e4 <HAL_RCC_GetSysClockFreq>
        break;
 8001d46:	2504      	movs	r5, #4
 8001d48:	e7f7      	b.n	8001d3a <UART_SetConfig+0xee>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d4a:	f7ff fd83 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d4e:	6862      	ldr	r2, [r4, #4]
 8001d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d54:	0856      	lsrs	r6, r2, #1
 8001d56:	2700      	movs	r7, #0
 8001d58:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	4630      	mov	r0, r6
 8001d60:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001d62:	f7fe fa8d 	bl	8000280 <__aeabi_uldivmod>
            break;
 8001d66:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001d68:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <UART_SetConfig+0x23c>)
 8001d6a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001d6e:	4299      	cmp	r1, r3
 8001d70:	d8be      	bhi.n	8001cf0 <UART_SetConfig+0xa4>
          huart->Instance->BRR = usartdiv;
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	60d8      	str	r0, [r3, #12]
 8001d76:	e7bc      	b.n	8001cf2 <UART_SetConfig+0xa6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001d78:	4844      	ldr	r0, [pc, #272]	; (8001e8c <UART_SetConfig+0x240>)
 8001d7a:	0855      	lsrs	r5, r2, #1
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001d82:	f141 0100 	adc.w	r1, r1, #0
 8001d86:	e7ec      	b.n	8001d62 <UART_SetConfig+0x116>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d88:	f7ff fa2c 	bl	80011e4 <HAL_RCC_GetSysClockFreq>
 8001d8c:	e7df      	b.n	8001d4e <UART_SetConfig+0x102>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001d8e:	0850      	lsrs	r0, r2, #1
 8001d90:	2100      	movs	r1, #0
 8001d92:	2300      	movs	r3, #0
 8001d94:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001d98:	e7f3      	b.n	8001d82 <UART_SetConfig+0x136>
            ret = HAL_ERROR;
 8001d9a:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	e7e3      	b.n	8001d68 <UART_SetConfig+0x11c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001da0:	f7ff fd58 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001da4:	6861      	ldr	r1, [r4, #4]
 8001da6:	084a      	lsrs	r2, r1, #1
 8001da8:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001dac:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001db2:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001db4:	f1a3 0010 	sub.w	r0, r3, #16
 8001db8:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001dbc:	4288      	cmp	r0, r1
 8001dbe:	d897      	bhi.n	8001cf0 <UART_SetConfig+0xa4>
      brrtemp = usartdiv & 0xFFF0U;
 8001dc0:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8001dc4:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001dc6:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001dca:	430b      	orrs	r3, r1
 8001dcc:	60c3      	str	r3, [r0, #12]
 8001dce:	e790      	b.n	8001cf2 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001dd0:	f7ff fd52 	bl	8001878 <HAL_RCC_GetPCLK2Freq>
 8001dd4:	e7e6      	b.n	8001da4 <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001dd6:	6860      	ldr	r0, [r4, #4]
 8001dd8:	0843      	lsrs	r3, r0, #1
 8001dda:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001dde:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001de2:	fbb3 f3f0 	udiv	r3, r3, r0
 8001de6:	e7e3      	b.n	8001db0 <UART_SetConfig+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001de8:	f7ff f9fc 	bl	80011e4 <HAL_RCC_GetSysClockFreq>
 8001dec:	e7da      	b.n	8001da4 <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001dee:	6860      	ldr	r0, [r4, #4]
 8001df0:	0843      	lsrs	r3, r0, #1
 8001df2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001df6:	e7f4      	b.n	8001de2 <UART_SetConfig+0x196>
        ret = HAL_ERROR;
 8001df8:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e7da      	b.n	8001db4 <UART_SetConfig+0x168>
    switch (clocksource)
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d830      	bhi.n	8001e64 <UART_SetConfig+0x218>
 8001e02:	e8df f003 	tbb	[pc, r3]
 8001e06:	1805      	.short	0x1805
 8001e08:	2f242f1b 	.word	0x2f242f1b
 8001e0c:	2f2f      	.short	0x2f2f
 8001e0e:	27          	.byte	0x27
 8001e0f:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e10:	f7ff fd20 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001e14:	6862      	ldr	r2, [r4, #4]
 8001e16:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001e1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e1e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e20:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e22:	f1a3 0010 	sub.w	r0, r3, #16
 8001e26:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001e2a:	4288      	cmp	r0, r1
 8001e2c:	f63f af60 	bhi.w	8001cf0 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 8001e30:	6821      	ldr	r1, [r4, #0]
 8001e32:	60cb      	str	r3, [r1, #12]
 8001e34:	e75d      	b.n	8001cf2 <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001e36:	f7ff fd1f 	bl	8001878 <HAL_RCC_GetPCLK2Freq>
 8001e3a:	e7eb      	b.n	8001e14 <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001e3c:	6860      	ldr	r0, [r4, #4]
 8001e3e:	0843      	lsrs	r3, r0, #1
 8001e40:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001e44:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e48:	fbb3 f3f0 	udiv	r3, r3, r0
 8001e4c:	e7e7      	b.n	8001e1e <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e4e:	f7ff f9c9 	bl	80011e4 <HAL_RCC_GetSysClockFreq>
 8001e52:	e7df      	b.n	8001e14 <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e54:	6860      	ldr	r0, [r4, #4]
 8001e56:	0843      	lsrs	r3, r0, #1
 8001e58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e5c:	e7f4      	b.n	8001e48 <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e5e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001e62:	d0c9      	beq.n	8001df8 <UART_SetConfig+0x1ac>
        ret = HAL_ERROR;
 8001e64:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e7db      	b.n	8001e22 <UART_SetConfig+0x1d6>
 8001e6a:	bf00      	nop
 8001e6c:	efff69f3 	.word	0xefff69f3
 8001e70:	40008000 	.word	0x40008000
 8001e74:	40013800 	.word	0x40013800
 8001e78:	08002fc0 	.word	0x08002fc0
 8001e7c:	40004400 	.word	0x40004400
 8001e80:	08002fc4 	.word	0x08002fc4
 8001e84:	00f42400 	.word	0x00f42400
 8001e88:	000ffcff 	.word	0x000ffcff
 8001e8c:	f4240000 	.word	0xf4240000

08001e90 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e92:	07da      	lsls	r2, r3, #31
{
 8001e94:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e96:	d506      	bpl.n	8001ea6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001e98:	6801      	ldr	r1, [r0, #0]
 8001e9a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001e9c:	684a      	ldr	r2, [r1, #4]
 8001e9e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001ea2:	4322      	orrs	r2, r4
 8001ea4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ea6:	079c      	lsls	r4, r3, #30
 8001ea8:	d506      	bpl.n	8001eb8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001eaa:	6801      	ldr	r1, [r0, #0]
 8001eac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001eae:	684a      	ldr	r2, [r1, #4]
 8001eb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001eb4:	4322      	orrs	r2, r4
 8001eb6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001eb8:	0759      	lsls	r1, r3, #29
 8001eba:	d506      	bpl.n	8001eca <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ebc:	6801      	ldr	r1, [r0, #0]
 8001ebe:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001ec0:	684a      	ldr	r2, [r1, #4]
 8001ec2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ec6:	4322      	orrs	r2, r4
 8001ec8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001eca:	071a      	lsls	r2, r3, #28
 8001ecc:	d506      	bpl.n	8001edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001ece:	6801      	ldr	r1, [r0, #0]
 8001ed0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001ed2:	684a      	ldr	r2, [r1, #4]
 8001ed4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ed8:	4322      	orrs	r2, r4
 8001eda:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001edc:	06dc      	lsls	r4, r3, #27
 8001ede:	d506      	bpl.n	8001eee <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001ee0:	6801      	ldr	r1, [r0, #0]
 8001ee2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001ee4:	688a      	ldr	r2, [r1, #8]
 8001ee6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001eea:	4322      	orrs	r2, r4
 8001eec:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001eee:	0699      	lsls	r1, r3, #26
 8001ef0:	d506      	bpl.n	8001f00 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001ef2:	6801      	ldr	r1, [r0, #0]
 8001ef4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001ef6:	688a      	ldr	r2, [r1, #8]
 8001ef8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001efc:	4322      	orrs	r2, r4
 8001efe:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f00:	065a      	lsls	r2, r3, #25
 8001f02:	d50f      	bpl.n	8001f24 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f04:	6801      	ldr	r1, [r0, #0]
 8001f06:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001f08:	684a      	ldr	r2, [r1, #4]
 8001f0a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001f0e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f10:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f14:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f16:	d105      	bne.n	8001f24 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f18:	684a      	ldr	r2, [r1, #4]
 8001f1a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001f1c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001f20:	4322      	orrs	r2, r4
 8001f22:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f24:	061b      	lsls	r3, r3, #24
 8001f26:	d506      	bpl.n	8001f36 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f28:	6802      	ldr	r2, [r0, #0]
 8001f2a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001f2c:	6853      	ldr	r3, [r2, #4]
 8001f2e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001f32:	430b      	orrs	r3, r1
 8001f34:	6053      	str	r3, [r2, #4]
 8001f36:	bd10      	pop	{r4, pc}

08001f38 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f3c:	9d06      	ldr	r5, [sp, #24]
 8001f3e:	4604      	mov	r4, r0
 8001f40:	460f      	mov	r7, r1
 8001f42:	4616      	mov	r6, r2
 8001f44:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f46:	6821      	ldr	r1, [r4, #0]
 8001f48:	69ca      	ldr	r2, [r1, #28]
 8001f4a:	ea37 0302 	bics.w	r3, r7, r2
 8001f4e:	bf0c      	ite	eq
 8001f50:	2201      	moveq	r2, #1
 8001f52:	2200      	movne	r2, #0
 8001f54:	42b2      	cmp	r2, r6
 8001f56:	d002      	beq.n	8001f5e <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001f58:	2000      	movs	r0, #0
}
 8001f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001f5e:	1c6b      	adds	r3, r5, #1
 8001f60:	d0f2      	beq.n	8001f48 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f62:	b99d      	cbnz	r5, 8001f8c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f6c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	f022 0201 	bic.w	r2, r2, #1
 8001f74:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001f76:	2320      	movs	r3, #32
 8001f78:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8001f7c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8001f80:	2300      	movs	r3, #0
 8001f82:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001f86:	2003      	movs	r0, #3
 8001f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f8c:	f7fe fb30 	bl	80005f0 <HAL_GetTick>
 8001f90:	eba0 0008 	sub.w	r0, r0, r8
 8001f94:	4285      	cmp	r5, r0
 8001f96:	d2d6      	bcs.n	8001f46 <UART_WaitOnFlagUntilTimeout+0xe>
 8001f98:	e7e4      	b.n	8001f64 <UART_WaitOnFlagUntilTimeout+0x2c>

08001f9a <HAL_UART_Transmit>:
{
 8001f9a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001f9e:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001fa0:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001fa4:	2b20      	cmp	r3, #32
{
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	460d      	mov	r5, r1
 8001faa:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001fac:	d14a      	bne.n	8002044 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8001fae:	2900      	cmp	r1, #0
 8001fb0:	d046      	beq.n	8002040 <HAL_UART_Transmit+0xa6>
 8001fb2:	2a00      	cmp	r2, #0
 8001fb4:	d044      	beq.n	8002040 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8001fb6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d042      	beq.n	8002044 <HAL_UART_Transmit+0xaa>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fc8:	2321      	movs	r3, #33	; 0x21
 8001fca:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8001fce:	f7fe fb0f 	bl	80005f0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001fd2:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001fd6:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001fd8:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001fdc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fe0:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8001fe2:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fe4:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8001fe6:	b952      	cbnz	r2, 8001ffe <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fe8:	2140      	movs	r1, #64	; 0x40
 8001fea:	4620      	mov	r0, r4
 8001fec:	f7ff ffa4 	bl	8001f38 <UART_WaitOnFlagUntilTimeout>
 8001ff0:	b958      	cbnz	r0, 800200a <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8001ff8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8001ffc:	e006      	b.n	800200c <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ffe:	2200      	movs	r2, #0
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	4620      	mov	r0, r4
 8002004:	f7ff ff98 	bl	8001f38 <UART_WaitOnFlagUntilTimeout>
 8002008:	b118      	cbz	r0, 8002012 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 800200a:	2003      	movs	r0, #3
}
 800200c:	b002      	add	sp, #8
 800200e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002012:	68a3      	ldr	r3, [r4, #8]
 8002014:	6822      	ldr	r2, [r4, #0]
 8002016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800201a:	d10d      	bne.n	8002038 <HAL_UART_Transmit+0x9e>
 800201c:	6923      	ldr	r3, [r4, #16]
 800201e:	b95b      	cbnz	r3, 8002038 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002020:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002028:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800202a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800202e:	3b01      	subs	r3, #1
 8002030:	b29b      	uxth	r3, r3
 8002032:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002036:	e7d1      	b.n	8001fdc <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002038:	782b      	ldrb	r3, [r5, #0]
 800203a:	8513      	strh	r3, [r2, #40]	; 0x28
 800203c:	3501      	adds	r5, #1
 800203e:	e7f4      	b.n	800202a <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002040:	2001      	movs	r0, #1
 8002042:	e7e3      	b.n	800200c <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8002044:	2002      	movs	r0, #2
 8002046:	e7e1      	b.n	800200c <HAL_UART_Transmit+0x72>

08002048 <UART_CheckIdleState>:
{
 8002048:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800204a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800204c:	2600      	movs	r6, #0
 800204e:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8002050:	f7fe face 	bl	80005f0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002054:	6823      	ldr	r3, [r4, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800205a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800205c:	d417      	bmi.n	800208e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800205e:	6823      	ldr	r3, [r4, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	075b      	lsls	r3, r3, #29
 8002064:	d50a      	bpl.n	800207c <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002066:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2200      	movs	r2, #0
 800206e:	462b      	mov	r3, r5
 8002070:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002074:	4620      	mov	r0, r4
 8002076:	f7ff ff5f 	bl	8001f38 <UART_WaitOnFlagUntilTimeout>
 800207a:	b9a0      	cbnz	r0, 80020a6 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 800207c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800207e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002080:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8002084:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002088:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 800208c:	e00c      	b.n	80020a8 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800208e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	4632      	mov	r2, r6
 8002096:	4603      	mov	r3, r0
 8002098:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800209c:	4620      	mov	r0, r4
 800209e:	f7ff ff4b 	bl	8001f38 <UART_WaitOnFlagUntilTimeout>
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d0db      	beq.n	800205e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80020a6:	2003      	movs	r0, #3
}
 80020a8:	b002      	add	sp, #8
 80020aa:	bd70      	pop	{r4, r5, r6, pc}

080020ac <HAL_UART_Init>:
{
 80020ac:	b510      	push	{r4, lr}
  if (huart == NULL)
 80020ae:	4604      	mov	r4, r0
 80020b0:	b360      	cbz	r0, 800210c <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80020b2:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80020b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020ba:	b91b      	cbnz	r3, 80020c4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80020bc:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80020c0:	f000 fa4e 	bl	8002560 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80020c4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020c6:	2324      	movs	r3, #36	; 0x24
 80020c8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 80020cc:	6813      	ldr	r3, [r2, #0]
 80020ce:	f023 0301 	bic.w	r3, r3, #1
 80020d2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020d4:	4620      	mov	r0, r4
 80020d6:	f7ff fdb9 	bl	8001c4c <UART_SetConfig>
 80020da:	2801      	cmp	r0, #1
 80020dc:	d016      	beq.n	800210c <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020e0:	b113      	cbz	r3, 80020e8 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80020e2:	4620      	mov	r0, r4
 80020e4:	f7ff fed4 	bl	8001e90 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020f8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002100:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002102:	601a      	str	r2, [r3, #0]
}
 8002104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002108:	f7ff bf9e 	b.w	8002048 <UART_CheckIdleState>
}
 800210c:	2001      	movs	r0, #1
 800210e:	bd10      	pop	{r4, pc}

08002110 <send_to_xbee>:
 * @retval int
 */
volatile uint16_t adc_value = 0;
int lux;

void send_to_xbee(char dataHexa[8]) {
 8002110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	int sum2 = 0x00;
	int sum1 = frame_type + frame_id + destination_add_MSB + destination_add_LSB
 8002114:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <send_to_xbee+0xc0>)
 8002116:	f893 a000 	ldrb.w	sl, [r3]
 800211a:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <send_to_xbee+0xc4>)
 800211c:	f893 9000 	ldrb.w	r9, [r3]
 8002120:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <send_to_xbee+0xc8>)
 8002122:	f893 8000 	ldrb.w	r8, [r3]
 8002126:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <send_to_xbee+0xcc>)
 8002128:	781f      	ldrb	r7, [r3, #0]
			+ option;
 800212a:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <send_to_xbee+0xd0>)
	int sum1 = frame_type + frame_id + destination_add_MSB + destination_add_LSB
 800212c:	eb0a 0209 	add.w	r2, sl, r9
			+ option;
 8002130:	781e      	ldrb	r6, [r3, #0]
	int sum1 = frame_type + frame_id + destination_add_MSB + destination_add_LSB
 8002132:	4442      	add	r2, r8
 8002134:	443a      	add	r2, r7
void send_to_xbee(char dataHexa[8]) {
 8002136:	4605      	mov	r5, r0
	int sum1 = frame_type + frame_id + destination_add_MSB + destination_add_LSB
 8002138:	1994      	adds	r4, r2, r6
	for (int i = 0; i < strlen(dataHexa); i++) {
 800213a:	f7fe f849 	bl	80001d0 <strlen>
 800213e:	462b      	mov	r3, r5
 8002140:	4428      	add	r0, r5
	int sum2 = 0x00;
 8002142:	2200      	movs	r2, #0
	for (int i = 0; i < strlen(dataHexa); i++) {
 8002144:	4283      	cmp	r3, r0
 8002146:	d13e      	bne.n	80021c6 <send_to_xbee+0xb6>
	}
	int sum = 0;
	sum = sum1 + sum2;
	unsigned char two_last_digit = sum & 0xFF;
	unsigned char checksum = 255 - two_last_digit;
	unsigned char message[16] = { start_delimeter, length_MSB, length_LSB,
 8002148:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <send_to_xbee+0xd4>)
 800214a:	f88d a003 	strb.w	sl, [sp, #3]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	f88d 3000 	strb.w	r3, [sp]
 8002154:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <send_to_xbee+0xd8>)
 8002156:	f88d 9004 	strb.w	r9, [sp, #4]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	f88d 3001 	strb.w	r3, [sp, #1]
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <send_to_xbee+0xdc>)
 8002162:	f88d 8005 	strb.w	r8, [sp, #5]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	f88d 3002 	strb.w	r3, [sp, #2]
	sum = sum1 + sum2;
 800216c:	4422      	add	r2, r4
	unsigned char message[16] = { start_delimeter, length_MSB, length_LSB,
 800216e:	2300      	movs	r3, #0
	unsigned char checksum = 255 - two_last_digit;
 8002170:	43d2      	mvns	r2, r2
	unsigned char message[16] = { start_delimeter, length_MSB, length_LSB,
 8002172:	f88d 7006 	strb.w	r7, [sp, #6]
 8002176:	f88d 6007 	strb.w	r6, [sp, #7]
 800217a:	f88d 3008 	strb.w	r3, [sp, #8]
 800217e:	f88d 3009 	strb.w	r3, [sp, #9]
 8002182:	f88d 300a 	strb.w	r3, [sp, #10]
 8002186:	f88d 300b 	strb.w	r3, [sp, #11]
 800218a:	f88d 300c 	strb.w	r3, [sp, #12]
 800218e:	f88d 300d 	strb.w	r3, [sp, #13]
 8002192:	f88d 300e 	strb.w	r3, [sp, #14]
 8002196:	f88d 200f 	strb.w	r2, [sp, #15]
			frame_type, frame_id, destination_add_MSB, destination_add_LSB,
			option, 0, 0, 0, 0, 0, 0, 0, checksum };
	for (int i = 0; i < 7; i++) {
		message[8 + i] = dataHexa[i];
 800219a:	eb0d 0203 	add.w	r2, sp, r3
 800219e:	5ce9      	ldrb	r1, [r5, r3]
 80021a0:	7211      	strb	r1, [r2, #8]
	for (int i = 0; i < 7; i++) {
 80021a2:	3301      	adds	r3, #1
 80021a4:	2b07      	cmp	r3, #7
 80021a6:	d1f8      	bne.n	800219a <send_to_xbee+0x8a>
	}
	HAL_UART_Transmit(&huart1, message, 16, 100);
 80021a8:	4669      	mov	r1, sp
 80021aa:	2364      	movs	r3, #100	; 0x64
 80021ac:	2210      	movs	r2, #16
 80021ae:	4810      	ldr	r0, [pc, #64]	; (80021f0 <send_to_xbee+0xe0>)
 80021b0:	f7ff fef3 	bl	8001f9a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, message, 16, 100);
 80021b4:	2364      	movs	r3, #100	; 0x64
 80021b6:	2210      	movs	r2, #16
 80021b8:	4669      	mov	r1, sp
 80021ba:	480e      	ldr	r0, [pc, #56]	; (80021f4 <send_to_xbee+0xe4>)
 80021bc:	f7ff feed 	bl	8001f9a <HAL_UART_Transmit>
}
 80021c0:	b004      	add	sp, #16
 80021c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		sum2 += dataHexa[i];
 80021c6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80021ca:	440a      	add	r2, r1
 80021cc:	e7ba      	b.n	8002144 <send_to_xbee+0x34>
 80021ce:	bf00      	nop
 80021d0:	20000003 	.word	0x20000003
 80021d4:	20000002 	.word	0x20000002
 80021d8:	20000001 	.word	0x20000001
 80021dc:	20000000 	.word	0x20000000
 80021e0:	2000008f 	.word	0x2000008f
 80021e4:	20000005 	.word	0x20000005
 80021e8:	2000008e 	.word	0x2000008e
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000108 	.word	0x20000108
 80021f4:	20000180 	.word	0x20000180

080021f8 <get_adc_value>:
	HAL_UART_Transmit(&huart2, (uint8_t*) msg6, 5, 10);
	char msg1[1] = { 0 };
	sprintf(msg1, "%d", lux);
	HAL_UART_Transmit(&huart2, (uint8_t*) msg1, 4, 10);
}
int get_adc_value(void) {
 80021f8:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start(&hadc1);
 80021fa:	4c0a      	ldr	r4, [pc, #40]	; (8002224 <get_adc_value+0x2c>)
	HAL_ADC_PollForConversion(&hadc1, 10000);
	adc_value = HAL_ADC_GetValue(&hadc1);
 80021fc:	4d0a      	ldr	r5, [pc, #40]	; (8002228 <get_adc_value+0x30>)
	HAL_ADC_Start(&hadc1);
 80021fe:	4620      	mov	r0, r4
 8002200:	f7fe fdc0 	bl	8000d84 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10000);
 8002204:	f242 7110 	movw	r1, #10000	; 0x2710
 8002208:	4620      	mov	r0, r4
 800220a:	f7fe faeb 	bl	80007e4 <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc1);
 800220e:	4620      	mov	r0, r4
 8002210:	f7fe fb36 	bl	8000880 <HAL_ADC_GetValue>
 8002214:	b280      	uxth	r0, r0
 8002216:	8028      	strh	r0, [r5, #0]
	HAL_ADC_Stop(&hadc1);
 8002218:	4620      	mov	r0, r4
 800221a:	f7fe fe26 	bl	8000e6a <HAL_ADC_Stop>
	return adc_value;
 800221e:	8828      	ldrh	r0, [r5, #0]
}
 8002220:	b280      	uxth	r0, r0
 8002222:	bd38      	pop	{r3, r4, r5, pc}
 8002224:	200000a0 	.word	0x200000a0
 8002228:	2000008c 	.word	0x2000008c

0800222c <get_sorted_value>:
int get_sorted_value() {
 800222c:	b530      	push	{r4, r5, lr}
 800222e:	b087      	sub	sp, #28
	int raw_value[5] = { 0 };
 8002230:	ad01      	add	r5, sp, #4
 8002232:	2214      	movs	r2, #20
 8002234:	2100      	movs	r1, #0
 8002236:	4628      	mov	r0, r5
 8002238:	f000 fa90 	bl	800275c <memset>
	for (k = 0; k < 4; k++) {
 800223c:	2400      	movs	r4, #0
		raw_value[k] = get_adc_value();
 800223e:	f7ff ffdb 	bl	80021f8 <get_adc_value>
 8002242:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
		HAL_Delay(100);
 8002246:	2064      	movs	r0, #100	; 0x64
	for (k = 0; k < 4; k++) {
 8002248:	3401      	adds	r4, #1
		HAL_Delay(100);
 800224a:	f7fe f9d7 	bl	80005fc <HAL_Delay>
	for (k = 0; k < 4; k++) {
 800224e:	2c04      	cmp	r4, #4
 8002250:	d1f5      	bne.n	800223e <get_sorted_value+0x12>
 8002252:	a805      	add	r0, sp, #20
 8002254:	462b      	mov	r3, r5
			if (raw_value[i] > raw_value[i + 1]) {
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	6859      	ldr	r1, [r3, #4]
 800225a:	428a      	cmp	r2, r1
				raw_value[i + 1] = apu;
 800225c:	bfc8      	it	gt
 800225e:	e883 0006 	stmiagt.w	r3, {r1, r2}
 8002262:	3304      	adds	r3, #4
		for (i = 0; i < 4; i++) {
 8002264:	4298      	cmp	r0, r3
 8002266:	d1f6      	bne.n	8002256 <get_sorted_value+0x2a>
	for (k = 0; k < 4; k++) {
 8002268:	3c01      	subs	r4, #1
 800226a:	d1f3      	bne.n	8002254 <get_sorted_value+0x28>
}
 800226c:	9803      	ldr	r0, [sp, #12]
 800226e:	b007      	add	sp, #28
 8002270:	bd30      	pop	{r4, r5, pc}
	...

08002274 <adc_channel>:

void adc_channel(int channel) {
 8002274:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = ADC_CHANNEL_8;
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <adc_channel+0x28>)
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
	sConfig.Offset = 0;
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002278:	4809      	ldr	r0, [pc, #36]	; (80022a0 <adc_channel+0x2c>)
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800227a:	2306      	movs	r3, #6
 800227c:	e88d 000c 	stmia.w	sp, {r2, r3}
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002280:	227f      	movs	r2, #127	; 0x7f
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002282:	2300      	movs	r3, #0
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002284:	9203      	str	r2, [sp, #12]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002286:	4669      	mov	r1, sp
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002288:	2204      	movs	r2, #4
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800228a:	9302      	str	r3, [sp, #8]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800228c:	9204      	str	r2, [sp, #16]
	sConfig.Offset = 0;
 800228e:	9305      	str	r3, [sp, #20]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002290:	f7fe fafa 	bl	8000888 <HAL_ADC_ConfigChannel>

}
 8002294:	b007      	add	sp, #28
 8002296:	f85d fb04 	ldr.w	pc, [sp], #4
 800229a:	bf00      	nop
 800229c:	21800100 	.word	0x21800100
 80022a0:	200000a0 	.word	0x200000a0

080022a4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80022a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022a8:	b0ac      	sub	sp, #176	; 0xb0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80022aa:	2414      	movs	r4, #20
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80022ac:	2244      	movs	r2, #68	; 0x44
 80022ae:	2100      	movs	r1, #0
 80022b0:	a806      	add	r0, sp, #24
 80022b2:	f000 fa53 	bl	800275c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80022b6:	4622      	mov	r2, r4
 80022b8:	2100      	movs	r1, #0
 80022ba:	a801      	add	r0, sp, #4
 80022bc:	f000 fa4e 	bl	800275c <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80022c0:	2100      	movs	r1, #0
 80022c2:	2254      	movs	r2, #84	; 0x54
 80022c4:	a817      	add	r0, sp, #92	; 0x5c
 80022c6:	f000 fa49 	bl	800275c <memset>

	/**Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80022ca:	f7fe ff03 	bl	80010d4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80022ce:	4a23      	ldr	r2, [pc, #140]	; (800235c <SystemClock_Config+0xb8>)
 80022d0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80022d4:	f023 0318 	bic.w	r3, r3, #24
 80022d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80022dc:	2500      	movs	r5, #0
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022de:	2602      	movs	r6, #2
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80022e0:	9406      	str	r4, [sp, #24]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80022e2:	2360      	movs	r3, #96	; 0x60
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022e4:	2401      	movs	r4, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
	RCC_OscInitStruct.PLL.PLLM = 1;
	RCC_OscInitStruct.PLL.PLLN = 16;
 80022e6:	f04f 0810 	mov.w	r8, #16
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80022ea:	2707      	movs	r7, #7
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80022ec:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80022ee:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022f0:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80022f2:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80022f4:	950d      	str	r5, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022f6:	9610      	str	r6, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80022f8:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 80022fa:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 16;
 80022fc:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002300:	9714      	str	r7, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002302:	9615      	str	r6, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002304:	9616      	str	r6, [sp, #88]	; 0x58
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002306:	f7fe ffc1 	bl	800128c <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800230a:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800230c:	4621      	mov	r1, r4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800230e:	9301      	str	r3, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002310:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002312:	2303      	movs	r3, #3
 8002314:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002316:	9503      	str	r5, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002318:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800231a:	9505      	str	r5, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800231c:	f7ff fa08 	bl	8001730 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8002320:	f244 0303 	movw	r3, #16387	; 0x4003
 8002324:	9317      	str	r3, [sp, #92]	; 0x5c
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002326:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800232a:	9329      	str	r3, [sp, #164]	; 0xa4
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800232c:	a817      	add	r0, sp, #92	; 0x5c
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800232e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002332:	931e      	str	r3, [sp, #120]	; 0x78
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002334:	951f      	str	r5, [sp, #124]	; 0x7c
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002336:	9520      	str	r5, [sp, #128]	; 0x80
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002338:	9418      	str	r4, [sp, #96]	; 0x60
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800233a:	9419      	str	r4, [sp, #100]	; 0x64
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800233c:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002340:	971b      	str	r7, [sp, #108]	; 0x6c
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002342:	961c      	str	r6, [sp, #112]	; 0x70
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002344:	961d      	str	r6, [sp, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002346:	f7ff fb35 	bl	80019b4 <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
	/**Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800234a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800234e:	f7fe fed1 	bl	80010f4 <HAL_PWREx_ControlVoltageScaling>
			!= HAL_OK) {
		Error_Handler();
	}
	/**Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8002352:	f7ff fc73 	bl	8001c3c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002356:	b02c      	add	sp, #176	; 0xb0
 8002358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800235c:	40021000 	.word	0x40021000

08002360 <main>:
int main(void) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	; 0x28
	HAL_Init();
 8002364:	f7fe f92c 	bl	80005c0 <HAL_Init>
	SystemClock_Config();
 8002368:	f7ff ff9c 	bl	80022a4 <SystemClock_Config>
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800236c:	2214      	movs	r2, #20
 800236e:	2100      	movs	r1, #0
 8002370:	a804      	add	r0, sp, #16
 8002372:	f000 f9f3 	bl	800275c <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8002376:	4b4a      	ldr	r3, [pc, #296]	; (80024a0 <main+0x140>)
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002378:	484a      	ldr	r0, [pc, #296]	; (80024a4 <main+0x144>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800237a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	hadc1.Instance = ADC1;
 800237c:	4d4a      	ldr	r5, [pc, #296]	; (80024a8 <main+0x148>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800237e:	f042 0204 	orr.w	r2, r2, #4
 8002382:	64da      	str	r2, [r3, #76]	; 0x4c
 8002384:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002386:	f002 0204 	and.w	r2, r2, #4
 800238a:	9201      	str	r2, [sp, #4]
 800238c:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800238e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002390:	f042 0201 	orr.w	r2, r2, #1
 8002394:	64da      	str	r2, [r3, #76]	; 0x4c
 8002396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002398:	f002 0201 	and.w	r2, r2, #1
 800239c:	9202      	str	r2, [sp, #8]
 800239e:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80023a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023a2:	f042 0202 	orr.w	r2, r2, #2
 80023a6:	64da      	str	r2, [r3, #76]	; 0x4c
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023aa:	f003 0302 	and.w	r3, r3, #2
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80023ae:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80023b0:	9303      	str	r3, [sp, #12]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80023b2:	2108      	movs	r1, #8

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2400      	movs	r4, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b6:	2601      	movs	r6, #1
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80023b8:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80023ba:	f7fe fe85 	bl	80010c8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LD3_Pin;
 80023be:	2308      	movs	r3, #8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80023c0:	a904      	add	r1, sp, #16
 80023c2:	4838      	ldr	r0, [pc, #224]	; (80024a4 <main+0x144>)
	GPIO_InitStruct.Pin = LD3_Pin;
 80023c4:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c6:	9605      	str	r6, [sp, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ca:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80023cc:	f7fe fdc8 	bl	8000f60 <HAL_GPIO_Init>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80023d0:	4621      	mov	r1, r4
 80023d2:	2218      	movs	r2, #24
 80023d4:	a804      	add	r0, sp, #16
 80023d6:	f000 f9c1 	bl	800275c <memset>
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80023da:	4a34      	ldr	r2, [pc, #208]	; (80024ac <main+0x14c>)
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023dc:	60ac      	str	r4, [r5, #8]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80023de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023e2:	2704      	movs	r7, #4
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80023e4:	4628      	mov	r0, r5
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80023e6:	e885 000c 	stmia.w	r5, {r2, r3}
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023ea:	60ec      	str	r4, [r5, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023ec:	612c      	str	r4, [r5, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80023ee:	762c      	strb	r4, [r5, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80023f0:	766e      	strb	r6, [r5, #25]
	hadc1.Init.NbrOfConversion = 1;
 80023f2:	61ee      	str	r6, [r5, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023f4:	f885 4020 	strb.w	r4, [r5, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023f8:	62ac      	str	r4, [r5, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023fa:	62ec      	str	r4, [r5, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80023fc:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002400:	636c      	str	r4, [r5, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8002402:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002406:	616f      	str	r7, [r5, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002408:	f7fe f91c 	bl	8000644 <HAL_ADC_Init>
	sConfig.Channel = ADC_CHANNEL_8;
 800240c:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <main+0x150>)
 800240e:	9304      	str	r3, [sp, #16]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002410:	2306      	movs	r3, #6
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002412:	a904      	add	r1, sp, #16
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002414:	9305      	str	r3, [sp, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002416:	4628      	mov	r0, r5
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002418:	237f      	movs	r3, #127	; 0x7f
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800241a:	9406      	str	r4, [sp, #24]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800241c:	9307      	str	r3, [sp, #28]
	sConfig.Offset = 0;
 800241e:	9409      	str	r4, [sp, #36]	; 0x24
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002420:	9708      	str	r7, [sp, #32]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002422:	f7fe fa31 	bl	8000888 <HAL_ADC_ConfigChannel>
	huart1.Instance = USART1;
 8002426:	4823      	ldr	r0, [pc, #140]	; (80024b4 <main+0x154>)
	huart1.Init.BaudRate = 115200;
 8002428:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <main+0x158>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800242a:	6084      	str	r4, [r0, #8]
	huart1.Init.BaudRate = 115200;
 800242c:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002430:	250c      	movs	r5, #12
	huart1.Init.BaudRate = 115200;
 8002432:	e880 0048 	stmia.w	r0, {r3, r6}
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002436:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002438:	6104      	str	r4, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800243a:	6145      	str	r5, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243c:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800243e:	61c4      	str	r4, [r0, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002440:	6204      	str	r4, [r0, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002442:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002444:	f7ff fe32 	bl	80020ac <HAL_UART_Init>
	huart2.Instance = USART2;
 8002448:	481c      	ldr	r0, [pc, #112]	; (80024bc <main+0x15c>)
 800244a:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <main+0x160>)
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800244c:	6084      	str	r4, [r0, #8]
	huart2.Init.BaudRate = 115200;
 800244e:	e880 0048 	stmia.w	r0, {r3, r6}
	huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8002452:	f44f 7380 	mov.w	r3, #256	; 0x100
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002456:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002458:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800245a:	6145      	str	r5, [r0, #20]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800245c:	61c4      	str	r4, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800245e:	6204      	str	r4, [r0, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002460:	6244      	str	r4, [r0, #36]	; 0x24
	huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8002462:	6183      	str	r3, [r0, #24]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002464:	f7ff fe22 	bl	80020ac <HAL_UART_Init>
		adc_value = get_sorted_value();
 8002468:	4c16      	ldr	r4, [pc, #88]	; (80024c4 <main+0x164>)
		lux = adc_value;
 800246a:	4e17      	ldr	r6, [pc, #92]	; (80024c8 <main+0x168>)
		sprintf(msg1, "%d", lux);
 800246c:	4d17      	ldr	r5, [pc, #92]	; (80024cc <main+0x16c>)
		char msg1[8]="";
 800246e:	2300      	movs	r3, #0
		adc_channel(8);
 8002470:	2008      	movs	r0, #8
		char msg1[8]="";
 8002472:	9304      	str	r3, [sp, #16]
 8002474:	9305      	str	r3, [sp, #20]
		adc_channel(8);
 8002476:	f7ff fefd 	bl	8002274 <adc_channel>
		adc_value = get_sorted_value();
 800247a:	f7ff fed7 	bl	800222c <get_sorted_value>
 800247e:	b280      	uxth	r0, r0
 8002480:	8020      	strh	r0, [r4, #0]
		lux = adc_value;
 8002482:	8822      	ldrh	r2, [r4, #0]
		sprintf(msg1, "%d", lux);
 8002484:	4629      	mov	r1, r5
		lux = adc_value;
 8002486:	b292      	uxth	r2, r2
		sprintf(msg1, "%d", lux);
 8002488:	a804      	add	r0, sp, #16
		lux = adc_value;
 800248a:	6032      	str	r2, [r6, #0]
		sprintf(msg1, "%d", lux);
 800248c:	f000 f96e 	bl	800276c <siprintf>
		send_to_xbee(msg1);
 8002490:	a804      	add	r0, sp, #16
 8002492:	f7ff fe3d 	bl	8002110 <send_to_xbee>
		HAL_Delay(3000);
 8002496:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800249a:	f7fe f8af 	bl	80005fc <HAL_Delay>
 800249e:	e7e6      	b.n	800246e <main+0x10e>
 80024a0:	40021000 	.word	0x40021000
 80024a4:	48000400 	.word	0x48000400
 80024a8:	200000a0 	.word	0x200000a0
 80024ac:	50040000 	.word	0x50040000
 80024b0:	21800100 	.word	0x21800100
 80024b4:	20000108 	.word	0x20000108
 80024b8:	40013800 	.word	0x40013800
 80024bc:	20000180 	.word	0x20000180
 80024c0:	40004400 	.word	0x40004400
 80024c4:	2000008c 	.word	0x2000008c
 80024c8:	20000104 	.word	0x20000104
 80024cc:	08002fd1 	.word	0x08002fd1

080024d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_MspInit+0x2c>)
 80024d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	661a      	str	r2, [r3, #96]	; 0x60
 80024da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80024dc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024de:	f002 0201 	and.w	r2, r2, #1
 80024e2:	9200      	str	r2, [sp, #0]
 80024e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024ec:	659a      	str	r2, [r3, #88]	; 0x58
 80024ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f8:	b002      	add	sp, #8
 80024fa:	4770      	bx	lr
 80024fc:	40021000 	.word	0x40021000

08002500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002500:	b510      	push	{r4, lr}
 8002502:	4604      	mov	r4, r0
 8002504:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002506:	2214      	movs	r2, #20
 8002508:	2100      	movs	r1, #0
 800250a:	a803      	add	r0, sp, #12
 800250c:	f000 f926 	bl	800275c <memset>
  if(hadc->Instance==ADC1)
 8002510:	6822      	ldr	r2, [r4, #0]
 8002512:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_ADC_MspInit+0x5c>)
 8002514:	429a      	cmp	r2, r3
 8002516:	d11e      	bne.n	8002556 <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002518:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800251c:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PA3     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002520:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC_CLK_ENABLE();
 8002522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002528:	64da      	str	r2, [r3, #76]	; 0x4c
 800252a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800252c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002530:	9201      	str	r2, [sp, #4]
 8002532:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002534:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	64da      	str	r2, [r3, #76]	; 0x4c
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	9302      	str	r3, [sp, #8]
 8002544:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002546:	2308      	movs	r3, #8
 8002548:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800254e:	230b      	movs	r3, #11
 8002550:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002552:	f7fe fd05 	bl	8000f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002556:	b008      	add	sp, #32
 8002558:	bd10      	pop	{r4, pc}
 800255a:	bf00      	nop
 800255c:	50040000 	.word	0x50040000

08002560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002560:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002562:	2214      	movs	r2, #20
{
 8002564:	b08b      	sub	sp, #44	; 0x2c
 8002566:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	2100      	movs	r1, #0
 800256a:	eb0d 0002 	add.w	r0, sp, r2
 800256e:	f000 f8f5 	bl	800275c <memset>
  if(huart->Instance==USART1)
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	4a28      	ldr	r2, [pc, #160]	; (8002618 <HAL_UART_MspInit+0xb8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d122      	bne.n	80025c0 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800257a:	4b28      	ldr	r3, [pc, #160]	; (800261c <HAL_UART_MspInit+0xbc>)
 800257c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800257e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002582:	661a      	str	r2, [r3, #96]	; 0x60
 8002584:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002586:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800258a:	9201      	str	r2, [sp, #4]
 800258c:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002590:	f042 0201 	orr.w	r2, r2, #1
 8002594:	64da      	str	r2, [r3, #76]	; 0x4c
 8002596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	9302      	str	r3, [sp, #8]
 800259e:	9b02      	ldr	r3, [sp, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025a0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025a4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025aa:	2303      	movs	r3, #3
 80025ac:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025ae:	2307      	movs	r3, #7
 80025b0:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	a905      	add	r1, sp, #20
 80025b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b8:	f7fe fcd2 	bl	8000f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025bc:	b00b      	add	sp, #44	; 0x2c
 80025be:	bd30      	pop	{r4, r5, pc}
  else if(huart->Instance==USART2)
 80025c0:	4a17      	ldr	r2, [pc, #92]	; (8002620 <HAL_UART_MspInit+0xc0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d1fa      	bne.n	80025bc <HAL_UART_MspInit+0x5c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_UART_MspInit+0xbc>)
 80025c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80025ce:	659a      	str	r2, [r3, #88]	; 0x58
 80025d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025d2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80025d6:	9203      	str	r2, [sp, #12]
 80025d8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025dc:	f042 0201 	orr.w	r2, r2, #1
 80025e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80025e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	9304      	str	r3, [sp, #16]
 80025ea:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|VCP_TX_Pin;
 80025ec:	2306      	movs	r3, #6
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ee:	2403      	movs	r4, #3
    GPIO_InitStruct.Pin = GPIO_PIN_1|VCP_TX_Pin;
 80025f0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025f4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	a905      	add	r1, sp, #20
 80025f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025fc:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fe:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002600:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f7fe fcad 	bl	8000f60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800260a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002612:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002614:	9409      	str	r4, [sp, #36]	; 0x24
 8002616:	e7cc      	b.n	80025b2 <HAL_UART_MspInit+0x52>
 8002618:	40013800 	.word	0x40013800
 800261c:	40021000 	.word	0x40021000
 8002620:	40004400 	.word	0x40004400

08002624 <NMI_Handler>:
 8002624:	4770      	bx	lr

08002626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002626:	e7fe      	b.n	8002626 <HardFault_Handler>

08002628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002628:	e7fe      	b.n	8002628 <MemManage_Handler>

0800262a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800262a:	e7fe      	b.n	800262a <BusFault_Handler>

0800262c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800262c:	e7fe      	b.n	800262c <UsageFault_Handler>

0800262e <SVC_Handler>:
 800262e:	4770      	bx	lr

08002630 <DebugMon_Handler>:
 8002630:	4770      	bx	lr

08002632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002632:	4770      	bx	lr

08002634 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002634:	f7fd bfd4 	b.w	80005e0 <HAL_IncTick>

08002638 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002638:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <_sbrk+0x2c>)
 800263c:	6819      	ldr	r1, [r3, #0]
{
 800263e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002640:	b909      	cbnz	r1, 8002646 <_sbrk+0xe>
		heap_end = &end;
 8002642:	4909      	ldr	r1, [pc, #36]	; (8002668 <_sbrk+0x30>)
 8002644:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002646:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002648:	4669      	mov	r1, sp
 800264a:	4402      	add	r2, r0
 800264c:	428a      	cmp	r2, r1
 800264e:	d906      	bls.n	800265e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002650:	f000 f85a 	bl	8002708 <__errno>
 8002654:	230c      	movs	r3, #12
 8002656:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002658:	f04f 30ff 	mov.w	r0, #4294967295
 800265c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800265e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002660:	bd08      	pop	{r3, pc}
 8002662:	bf00      	nop
 8002664:	20000090 	.word	0x20000090
 8002668:	200001fc 	.word	0x200001fc

0800266c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800266c:	490f      	ldr	r1, [pc, #60]	; (80026ac <SystemInit+0x40>)
 800266e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002672:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <SystemInit+0x44>)
 800267c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800267e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002680:	f042 0201 	orr.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002686:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800268e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002692:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002694:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002698:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026a0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80026a2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80026a8:	608b      	str	r3, [r1, #8]
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00
 80026b0:	40021000 	.word	0x40021000

080026b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80026b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80026ba:	e003      	b.n	80026c4 <LoopCopyDataInit>

080026bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80026be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80026c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80026c2:	3104      	adds	r1, #4

080026c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80026c4:	480b      	ldr	r0, [pc, #44]	; (80026f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80026c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80026ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80026cc:	d3f6      	bcc.n	80026bc <CopyDataInit>
	ldr	r2, =_sbss
 80026ce:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80026d0:	e002      	b.n	80026d8 <LoopFillZerobss>

080026d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80026d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80026d4:	f842 3b04 	str.w	r3, [r2], #4

080026d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <LoopForever+0x16>)
	cmp	r2, r3
 80026da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80026dc:	d3f9      	bcc.n	80026d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026de:	f7ff ffc5 	bl	800266c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026e2:	f000 f817 	bl	8002714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026e6:	f7ff fe3b 	bl	8002360 <main>

080026ea <LoopForever>:

LoopForever:
    b LoopForever
 80026ea:	e7fe      	b.n	80026ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026ec:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80026f0:	08003068 	.word	0x08003068
	ldr	r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80026f8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80026fc:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002700:	200001fc 	.word	0x200001fc

08002704 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002704:	e7fe      	b.n	8002704 <ADC1_IRQHandler>
	...

08002708 <__errno>:
 8002708:	4b01      	ldr	r3, [pc, #4]	; (8002710 <__errno+0x8>)
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	2000000c 	.word	0x2000000c

08002714 <__libc_init_array>:
 8002714:	b570      	push	{r4, r5, r6, lr}
 8002716:	4e0d      	ldr	r6, [pc, #52]	; (800274c <__libc_init_array+0x38>)
 8002718:	4c0d      	ldr	r4, [pc, #52]	; (8002750 <__libc_init_array+0x3c>)
 800271a:	1ba4      	subs	r4, r4, r6
 800271c:	10a4      	asrs	r4, r4, #2
 800271e:	2500      	movs	r5, #0
 8002720:	42a5      	cmp	r5, r4
 8002722:	d109      	bne.n	8002738 <__libc_init_array+0x24>
 8002724:	4e0b      	ldr	r6, [pc, #44]	; (8002754 <__libc_init_array+0x40>)
 8002726:	4c0c      	ldr	r4, [pc, #48]	; (8002758 <__libc_init_array+0x44>)
 8002728:	f000 fc3e 	bl	8002fa8 <_init>
 800272c:	1ba4      	subs	r4, r4, r6
 800272e:	10a4      	asrs	r4, r4, #2
 8002730:	2500      	movs	r5, #0
 8002732:	42a5      	cmp	r5, r4
 8002734:	d105      	bne.n	8002742 <__libc_init_array+0x2e>
 8002736:	bd70      	pop	{r4, r5, r6, pc}
 8002738:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800273c:	4798      	blx	r3
 800273e:	3501      	adds	r5, #1
 8002740:	e7ee      	b.n	8002720 <__libc_init_array+0xc>
 8002742:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002746:	4798      	blx	r3
 8002748:	3501      	adds	r5, #1
 800274a:	e7f2      	b.n	8002732 <__libc_init_array+0x1e>
 800274c:	08003060 	.word	0x08003060
 8002750:	08003060 	.word	0x08003060
 8002754:	08003060 	.word	0x08003060
 8002758:	08003064 	.word	0x08003064

0800275c <memset>:
 800275c:	4402      	add	r2, r0
 800275e:	4603      	mov	r3, r0
 8002760:	4293      	cmp	r3, r2
 8002762:	d100      	bne.n	8002766 <memset+0xa>
 8002764:	4770      	bx	lr
 8002766:	f803 1b01 	strb.w	r1, [r3], #1
 800276a:	e7f9      	b.n	8002760 <memset+0x4>

0800276c <siprintf>:
 800276c:	b40e      	push	{r1, r2, r3}
 800276e:	b500      	push	{lr}
 8002770:	b09c      	sub	sp, #112	; 0x70
 8002772:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002776:	ab1d      	add	r3, sp, #116	; 0x74
 8002778:	f8ad 1014 	strh.w	r1, [sp, #20]
 800277c:	9002      	str	r0, [sp, #8]
 800277e:	9006      	str	r0, [sp, #24]
 8002780:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002784:	480a      	ldr	r0, [pc, #40]	; (80027b0 <siprintf+0x44>)
 8002786:	9104      	str	r1, [sp, #16]
 8002788:	9107      	str	r1, [sp, #28]
 800278a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800278e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002792:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002796:	6800      	ldr	r0, [r0, #0]
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	a902      	add	r1, sp, #8
 800279c:	f000 f866 	bl	800286c <_svfiprintf_r>
 80027a0:	9b02      	ldr	r3, [sp, #8]
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	b01c      	add	sp, #112	; 0x70
 80027a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80027ac:	b003      	add	sp, #12
 80027ae:	4770      	bx	lr
 80027b0:	2000000c 	.word	0x2000000c

080027b4 <__ssputs_r>:
 80027b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027b8:	688e      	ldr	r6, [r1, #8]
 80027ba:	429e      	cmp	r6, r3
 80027bc:	4682      	mov	sl, r0
 80027be:	460c      	mov	r4, r1
 80027c0:	4691      	mov	r9, r2
 80027c2:	4698      	mov	r8, r3
 80027c4:	d835      	bhi.n	8002832 <__ssputs_r+0x7e>
 80027c6:	898a      	ldrh	r2, [r1, #12]
 80027c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027cc:	d031      	beq.n	8002832 <__ssputs_r+0x7e>
 80027ce:	6825      	ldr	r5, [r4, #0]
 80027d0:	6909      	ldr	r1, [r1, #16]
 80027d2:	1a6f      	subs	r7, r5, r1
 80027d4:	6965      	ldr	r5, [r4, #20]
 80027d6:	2302      	movs	r3, #2
 80027d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80027e0:	f108 0301 	add.w	r3, r8, #1
 80027e4:	443b      	add	r3, r7
 80027e6:	429d      	cmp	r5, r3
 80027e8:	bf38      	it	cc
 80027ea:	461d      	movcc	r5, r3
 80027ec:	0553      	lsls	r3, r2, #21
 80027ee:	d531      	bpl.n	8002854 <__ssputs_r+0xa0>
 80027f0:	4629      	mov	r1, r5
 80027f2:	f000 fb39 	bl	8002e68 <_malloc_r>
 80027f6:	4606      	mov	r6, r0
 80027f8:	b950      	cbnz	r0, 8002810 <__ssputs_r+0x5c>
 80027fa:	230c      	movs	r3, #12
 80027fc:	f8ca 3000 	str.w	r3, [sl]
 8002800:	89a3      	ldrh	r3, [r4, #12]
 8002802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002806:	81a3      	strh	r3, [r4, #12]
 8002808:	f04f 30ff 	mov.w	r0, #4294967295
 800280c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002810:	463a      	mov	r2, r7
 8002812:	6921      	ldr	r1, [r4, #16]
 8002814:	f000 fab4 	bl	8002d80 <memcpy>
 8002818:	89a3      	ldrh	r3, [r4, #12]
 800281a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800281e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002822:	81a3      	strh	r3, [r4, #12]
 8002824:	6126      	str	r6, [r4, #16]
 8002826:	6165      	str	r5, [r4, #20]
 8002828:	443e      	add	r6, r7
 800282a:	1bed      	subs	r5, r5, r7
 800282c:	6026      	str	r6, [r4, #0]
 800282e:	60a5      	str	r5, [r4, #8]
 8002830:	4646      	mov	r6, r8
 8002832:	4546      	cmp	r6, r8
 8002834:	bf28      	it	cs
 8002836:	4646      	movcs	r6, r8
 8002838:	4632      	mov	r2, r6
 800283a:	4649      	mov	r1, r9
 800283c:	6820      	ldr	r0, [r4, #0]
 800283e:	f000 faaa 	bl	8002d96 <memmove>
 8002842:	68a3      	ldr	r3, [r4, #8]
 8002844:	1b9b      	subs	r3, r3, r6
 8002846:	60a3      	str	r3, [r4, #8]
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	441e      	add	r6, r3
 800284c:	6026      	str	r6, [r4, #0]
 800284e:	2000      	movs	r0, #0
 8002850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002854:	462a      	mov	r2, r5
 8002856:	f000 fb65 	bl	8002f24 <_realloc_r>
 800285a:	4606      	mov	r6, r0
 800285c:	2800      	cmp	r0, #0
 800285e:	d1e1      	bne.n	8002824 <__ssputs_r+0x70>
 8002860:	6921      	ldr	r1, [r4, #16]
 8002862:	4650      	mov	r0, sl
 8002864:	f000 fab2 	bl	8002dcc <_free_r>
 8002868:	e7c7      	b.n	80027fa <__ssputs_r+0x46>
	...

0800286c <_svfiprintf_r>:
 800286c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002870:	b09d      	sub	sp, #116	; 0x74
 8002872:	4680      	mov	r8, r0
 8002874:	9303      	str	r3, [sp, #12]
 8002876:	898b      	ldrh	r3, [r1, #12]
 8002878:	061c      	lsls	r4, r3, #24
 800287a:	460d      	mov	r5, r1
 800287c:	4616      	mov	r6, r2
 800287e:	d50f      	bpl.n	80028a0 <_svfiprintf_r+0x34>
 8002880:	690b      	ldr	r3, [r1, #16]
 8002882:	b96b      	cbnz	r3, 80028a0 <_svfiprintf_r+0x34>
 8002884:	2140      	movs	r1, #64	; 0x40
 8002886:	f000 faef 	bl	8002e68 <_malloc_r>
 800288a:	6028      	str	r0, [r5, #0]
 800288c:	6128      	str	r0, [r5, #16]
 800288e:	b928      	cbnz	r0, 800289c <_svfiprintf_r+0x30>
 8002890:	230c      	movs	r3, #12
 8002892:	f8c8 3000 	str.w	r3, [r8]
 8002896:	f04f 30ff 	mov.w	r0, #4294967295
 800289a:	e0c5      	b.n	8002a28 <_svfiprintf_r+0x1bc>
 800289c:	2340      	movs	r3, #64	; 0x40
 800289e:	616b      	str	r3, [r5, #20]
 80028a0:	2300      	movs	r3, #0
 80028a2:	9309      	str	r3, [sp, #36]	; 0x24
 80028a4:	2320      	movs	r3, #32
 80028a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028aa:	2330      	movs	r3, #48	; 0x30
 80028ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028b0:	f04f 0b01 	mov.w	fp, #1
 80028b4:	4637      	mov	r7, r6
 80028b6:	463c      	mov	r4, r7
 80028b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d13c      	bne.n	800293a <_svfiprintf_r+0xce>
 80028c0:	ebb7 0a06 	subs.w	sl, r7, r6
 80028c4:	d00b      	beq.n	80028de <_svfiprintf_r+0x72>
 80028c6:	4653      	mov	r3, sl
 80028c8:	4632      	mov	r2, r6
 80028ca:	4629      	mov	r1, r5
 80028cc:	4640      	mov	r0, r8
 80028ce:	f7ff ff71 	bl	80027b4 <__ssputs_r>
 80028d2:	3001      	adds	r0, #1
 80028d4:	f000 80a3 	beq.w	8002a1e <_svfiprintf_r+0x1b2>
 80028d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028da:	4453      	add	r3, sl
 80028dc:	9309      	str	r3, [sp, #36]	; 0x24
 80028de:	783b      	ldrb	r3, [r7, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 809c 	beq.w	8002a1e <_svfiprintf_r+0x1b2>
 80028e6:	2300      	movs	r3, #0
 80028e8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ec:	9304      	str	r3, [sp, #16]
 80028ee:	9307      	str	r3, [sp, #28]
 80028f0:	9205      	str	r2, [sp, #20]
 80028f2:	9306      	str	r3, [sp, #24]
 80028f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028f8:	931a      	str	r3, [sp, #104]	; 0x68
 80028fa:	2205      	movs	r2, #5
 80028fc:	7821      	ldrb	r1, [r4, #0]
 80028fe:	4850      	ldr	r0, [pc, #320]	; (8002a40 <_svfiprintf_r+0x1d4>)
 8002900:	f7fd fc6e 	bl	80001e0 <memchr>
 8002904:	1c67      	adds	r7, r4, #1
 8002906:	9b04      	ldr	r3, [sp, #16]
 8002908:	b9d8      	cbnz	r0, 8002942 <_svfiprintf_r+0xd6>
 800290a:	06d9      	lsls	r1, r3, #27
 800290c:	bf44      	itt	mi
 800290e:	2220      	movmi	r2, #32
 8002910:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002914:	071a      	lsls	r2, r3, #28
 8002916:	bf44      	itt	mi
 8002918:	222b      	movmi	r2, #43	; 0x2b
 800291a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800291e:	7822      	ldrb	r2, [r4, #0]
 8002920:	2a2a      	cmp	r2, #42	; 0x2a
 8002922:	d016      	beq.n	8002952 <_svfiprintf_r+0xe6>
 8002924:	9a07      	ldr	r2, [sp, #28]
 8002926:	2100      	movs	r1, #0
 8002928:	200a      	movs	r0, #10
 800292a:	4627      	mov	r7, r4
 800292c:	3401      	adds	r4, #1
 800292e:	783b      	ldrb	r3, [r7, #0]
 8002930:	3b30      	subs	r3, #48	; 0x30
 8002932:	2b09      	cmp	r3, #9
 8002934:	d951      	bls.n	80029da <_svfiprintf_r+0x16e>
 8002936:	b1c9      	cbz	r1, 800296c <_svfiprintf_r+0x100>
 8002938:	e011      	b.n	800295e <_svfiprintf_r+0xf2>
 800293a:	2b25      	cmp	r3, #37	; 0x25
 800293c:	d0c0      	beq.n	80028c0 <_svfiprintf_r+0x54>
 800293e:	4627      	mov	r7, r4
 8002940:	e7b9      	b.n	80028b6 <_svfiprintf_r+0x4a>
 8002942:	4a3f      	ldr	r2, [pc, #252]	; (8002a40 <_svfiprintf_r+0x1d4>)
 8002944:	1a80      	subs	r0, r0, r2
 8002946:	fa0b f000 	lsl.w	r0, fp, r0
 800294a:	4318      	orrs	r0, r3
 800294c:	9004      	str	r0, [sp, #16]
 800294e:	463c      	mov	r4, r7
 8002950:	e7d3      	b.n	80028fa <_svfiprintf_r+0x8e>
 8002952:	9a03      	ldr	r2, [sp, #12]
 8002954:	1d11      	adds	r1, r2, #4
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	9103      	str	r1, [sp, #12]
 800295a:	2a00      	cmp	r2, #0
 800295c:	db01      	blt.n	8002962 <_svfiprintf_r+0xf6>
 800295e:	9207      	str	r2, [sp, #28]
 8002960:	e004      	b.n	800296c <_svfiprintf_r+0x100>
 8002962:	4252      	negs	r2, r2
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	9207      	str	r2, [sp, #28]
 800296a:	9304      	str	r3, [sp, #16]
 800296c:	783b      	ldrb	r3, [r7, #0]
 800296e:	2b2e      	cmp	r3, #46	; 0x2e
 8002970:	d10e      	bne.n	8002990 <_svfiprintf_r+0x124>
 8002972:	787b      	ldrb	r3, [r7, #1]
 8002974:	2b2a      	cmp	r3, #42	; 0x2a
 8002976:	f107 0101 	add.w	r1, r7, #1
 800297a:	d132      	bne.n	80029e2 <_svfiprintf_r+0x176>
 800297c:	9b03      	ldr	r3, [sp, #12]
 800297e:	1d1a      	adds	r2, r3, #4
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	9203      	str	r2, [sp, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	bfb8      	it	lt
 8002988:	f04f 33ff 	movlt.w	r3, #4294967295
 800298c:	3702      	adds	r7, #2
 800298e:	9305      	str	r3, [sp, #20]
 8002990:	4c2c      	ldr	r4, [pc, #176]	; (8002a44 <_svfiprintf_r+0x1d8>)
 8002992:	7839      	ldrb	r1, [r7, #0]
 8002994:	2203      	movs	r2, #3
 8002996:	4620      	mov	r0, r4
 8002998:	f7fd fc22 	bl	80001e0 <memchr>
 800299c:	b138      	cbz	r0, 80029ae <_svfiprintf_r+0x142>
 800299e:	2340      	movs	r3, #64	; 0x40
 80029a0:	1b00      	subs	r0, r0, r4
 80029a2:	fa03 f000 	lsl.w	r0, r3, r0
 80029a6:	9b04      	ldr	r3, [sp, #16]
 80029a8:	4303      	orrs	r3, r0
 80029aa:	9304      	str	r3, [sp, #16]
 80029ac:	3701      	adds	r7, #1
 80029ae:	7839      	ldrb	r1, [r7, #0]
 80029b0:	4825      	ldr	r0, [pc, #148]	; (8002a48 <_svfiprintf_r+0x1dc>)
 80029b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029b6:	2206      	movs	r2, #6
 80029b8:	1c7e      	adds	r6, r7, #1
 80029ba:	f7fd fc11 	bl	80001e0 <memchr>
 80029be:	2800      	cmp	r0, #0
 80029c0:	d035      	beq.n	8002a2e <_svfiprintf_r+0x1c2>
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <_svfiprintf_r+0x1e0>)
 80029c4:	b9fb      	cbnz	r3, 8002a06 <_svfiprintf_r+0x19a>
 80029c6:	9b03      	ldr	r3, [sp, #12]
 80029c8:	3307      	adds	r3, #7
 80029ca:	f023 0307 	bic.w	r3, r3, #7
 80029ce:	3308      	adds	r3, #8
 80029d0:	9303      	str	r3, [sp, #12]
 80029d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029d4:	444b      	add	r3, r9
 80029d6:	9309      	str	r3, [sp, #36]	; 0x24
 80029d8:	e76c      	b.n	80028b4 <_svfiprintf_r+0x48>
 80029da:	fb00 3202 	mla	r2, r0, r2, r3
 80029de:	2101      	movs	r1, #1
 80029e0:	e7a3      	b.n	800292a <_svfiprintf_r+0xbe>
 80029e2:	2300      	movs	r3, #0
 80029e4:	9305      	str	r3, [sp, #20]
 80029e6:	4618      	mov	r0, r3
 80029e8:	240a      	movs	r4, #10
 80029ea:	460f      	mov	r7, r1
 80029ec:	3101      	adds	r1, #1
 80029ee:	783a      	ldrb	r2, [r7, #0]
 80029f0:	3a30      	subs	r2, #48	; 0x30
 80029f2:	2a09      	cmp	r2, #9
 80029f4:	d903      	bls.n	80029fe <_svfiprintf_r+0x192>
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0ca      	beq.n	8002990 <_svfiprintf_r+0x124>
 80029fa:	9005      	str	r0, [sp, #20]
 80029fc:	e7c8      	b.n	8002990 <_svfiprintf_r+0x124>
 80029fe:	fb04 2000 	mla	r0, r4, r0, r2
 8002a02:	2301      	movs	r3, #1
 8002a04:	e7f1      	b.n	80029ea <_svfiprintf_r+0x17e>
 8002a06:	ab03      	add	r3, sp, #12
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	462a      	mov	r2, r5
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <_svfiprintf_r+0x1e4>)
 8002a0e:	a904      	add	r1, sp, #16
 8002a10:	4640      	mov	r0, r8
 8002a12:	f3af 8000 	nop.w
 8002a16:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002a1a:	4681      	mov	r9, r0
 8002a1c:	d1d9      	bne.n	80029d2 <_svfiprintf_r+0x166>
 8002a1e:	89ab      	ldrh	r3, [r5, #12]
 8002a20:	065b      	lsls	r3, r3, #25
 8002a22:	f53f af38 	bmi.w	8002896 <_svfiprintf_r+0x2a>
 8002a26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a28:	b01d      	add	sp, #116	; 0x74
 8002a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a2e:	ab03      	add	r3, sp, #12
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	462a      	mov	r2, r5
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <_svfiprintf_r+0x1e4>)
 8002a36:	a904      	add	r1, sp, #16
 8002a38:	4640      	mov	r0, r8
 8002a3a:	f000 f881 	bl	8002b40 <_printf_i>
 8002a3e:	e7ea      	b.n	8002a16 <_svfiprintf_r+0x1aa>
 8002a40:	08003024 	.word	0x08003024
 8002a44:	0800302a 	.word	0x0800302a
 8002a48:	0800302e 	.word	0x0800302e
 8002a4c:	00000000 	.word	0x00000000
 8002a50:	080027b5 	.word	0x080027b5

08002a54 <_printf_common>:
 8002a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a58:	4691      	mov	r9, r2
 8002a5a:	461f      	mov	r7, r3
 8002a5c:	688a      	ldr	r2, [r1, #8]
 8002a5e:	690b      	ldr	r3, [r1, #16]
 8002a60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a64:	4293      	cmp	r3, r2
 8002a66:	bfb8      	it	lt
 8002a68:	4613      	movlt	r3, r2
 8002a6a:	f8c9 3000 	str.w	r3, [r9]
 8002a6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a72:	4606      	mov	r6, r0
 8002a74:	460c      	mov	r4, r1
 8002a76:	b112      	cbz	r2, 8002a7e <_printf_common+0x2a>
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f8c9 3000 	str.w	r3, [r9]
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	0699      	lsls	r1, r3, #26
 8002a82:	bf42      	ittt	mi
 8002a84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a88:	3302      	addmi	r3, #2
 8002a8a:	f8c9 3000 	strmi.w	r3, [r9]
 8002a8e:	6825      	ldr	r5, [r4, #0]
 8002a90:	f015 0506 	ands.w	r5, r5, #6
 8002a94:	d107      	bne.n	8002aa6 <_printf_common+0x52>
 8002a96:	f104 0a19 	add.w	sl, r4, #25
 8002a9a:	68e3      	ldr	r3, [r4, #12]
 8002a9c:	f8d9 2000 	ldr.w	r2, [r9]
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	429d      	cmp	r5, r3
 8002aa4:	db29      	blt.n	8002afa <_printf_common+0xa6>
 8002aa6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002aaa:	6822      	ldr	r2, [r4, #0]
 8002aac:	3300      	adds	r3, #0
 8002aae:	bf18      	it	ne
 8002ab0:	2301      	movne	r3, #1
 8002ab2:	0692      	lsls	r2, r2, #26
 8002ab4:	d42e      	bmi.n	8002b14 <_printf_common+0xc0>
 8002ab6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002aba:	4639      	mov	r1, r7
 8002abc:	4630      	mov	r0, r6
 8002abe:	47c0      	blx	r8
 8002ac0:	3001      	adds	r0, #1
 8002ac2:	d021      	beq.n	8002b08 <_printf_common+0xb4>
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	68e5      	ldr	r5, [r4, #12]
 8002ac8:	f8d9 2000 	ldr.w	r2, [r9]
 8002acc:	f003 0306 	and.w	r3, r3, #6
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	bf08      	it	eq
 8002ad4:	1aad      	subeq	r5, r5, r2
 8002ad6:	68a3      	ldr	r3, [r4, #8]
 8002ad8:	6922      	ldr	r2, [r4, #16]
 8002ada:	bf0c      	ite	eq
 8002adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ae0:	2500      	movne	r5, #0
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	bfc4      	itt	gt
 8002ae6:	1a9b      	subgt	r3, r3, r2
 8002ae8:	18ed      	addgt	r5, r5, r3
 8002aea:	f04f 0900 	mov.w	r9, #0
 8002aee:	341a      	adds	r4, #26
 8002af0:	454d      	cmp	r5, r9
 8002af2:	d11b      	bne.n	8002b2c <_printf_common+0xd8>
 8002af4:	2000      	movs	r0, #0
 8002af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002afa:	2301      	movs	r3, #1
 8002afc:	4652      	mov	r2, sl
 8002afe:	4639      	mov	r1, r7
 8002b00:	4630      	mov	r0, r6
 8002b02:	47c0      	blx	r8
 8002b04:	3001      	adds	r0, #1
 8002b06:	d103      	bne.n	8002b10 <_printf_common+0xbc>
 8002b08:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b10:	3501      	adds	r5, #1
 8002b12:	e7c2      	b.n	8002a9a <_printf_common+0x46>
 8002b14:	18e1      	adds	r1, r4, r3
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	2030      	movs	r0, #48	; 0x30
 8002b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b1e:	4422      	add	r2, r4
 8002b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b28:	3302      	adds	r3, #2
 8002b2a:	e7c4      	b.n	8002ab6 <_printf_common+0x62>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	4622      	mov	r2, r4
 8002b30:	4639      	mov	r1, r7
 8002b32:	4630      	mov	r0, r6
 8002b34:	47c0      	blx	r8
 8002b36:	3001      	adds	r0, #1
 8002b38:	d0e6      	beq.n	8002b08 <_printf_common+0xb4>
 8002b3a:	f109 0901 	add.w	r9, r9, #1
 8002b3e:	e7d7      	b.n	8002af0 <_printf_common+0x9c>

08002b40 <_printf_i>:
 8002b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b44:	4617      	mov	r7, r2
 8002b46:	7e0a      	ldrb	r2, [r1, #24]
 8002b48:	b085      	sub	sp, #20
 8002b4a:	2a6e      	cmp	r2, #110	; 0x6e
 8002b4c:	4698      	mov	r8, r3
 8002b4e:	4606      	mov	r6, r0
 8002b50:	460c      	mov	r4, r1
 8002b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b54:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002b58:	f000 80bc 	beq.w	8002cd4 <_printf_i+0x194>
 8002b5c:	d81a      	bhi.n	8002b94 <_printf_i+0x54>
 8002b5e:	2a63      	cmp	r2, #99	; 0x63
 8002b60:	d02e      	beq.n	8002bc0 <_printf_i+0x80>
 8002b62:	d80a      	bhi.n	8002b7a <_printf_i+0x3a>
 8002b64:	2a00      	cmp	r2, #0
 8002b66:	f000 80c8 	beq.w	8002cfa <_printf_i+0x1ba>
 8002b6a:	2a58      	cmp	r2, #88	; 0x58
 8002b6c:	f000 808a 	beq.w	8002c84 <_printf_i+0x144>
 8002b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b74:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002b78:	e02a      	b.n	8002bd0 <_printf_i+0x90>
 8002b7a:	2a64      	cmp	r2, #100	; 0x64
 8002b7c:	d001      	beq.n	8002b82 <_printf_i+0x42>
 8002b7e:	2a69      	cmp	r2, #105	; 0x69
 8002b80:	d1f6      	bne.n	8002b70 <_printf_i+0x30>
 8002b82:	6821      	ldr	r1, [r4, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002b8a:	d023      	beq.n	8002bd4 <_printf_i+0x94>
 8002b8c:	1d11      	adds	r1, r2, #4
 8002b8e:	6019      	str	r1, [r3, #0]
 8002b90:	6813      	ldr	r3, [r2, #0]
 8002b92:	e027      	b.n	8002be4 <_printf_i+0xa4>
 8002b94:	2a73      	cmp	r2, #115	; 0x73
 8002b96:	f000 80b4 	beq.w	8002d02 <_printf_i+0x1c2>
 8002b9a:	d808      	bhi.n	8002bae <_printf_i+0x6e>
 8002b9c:	2a6f      	cmp	r2, #111	; 0x6f
 8002b9e:	d02a      	beq.n	8002bf6 <_printf_i+0xb6>
 8002ba0:	2a70      	cmp	r2, #112	; 0x70
 8002ba2:	d1e5      	bne.n	8002b70 <_printf_i+0x30>
 8002ba4:	680a      	ldr	r2, [r1, #0]
 8002ba6:	f042 0220 	orr.w	r2, r2, #32
 8002baa:	600a      	str	r2, [r1, #0]
 8002bac:	e003      	b.n	8002bb6 <_printf_i+0x76>
 8002bae:	2a75      	cmp	r2, #117	; 0x75
 8002bb0:	d021      	beq.n	8002bf6 <_printf_i+0xb6>
 8002bb2:	2a78      	cmp	r2, #120	; 0x78
 8002bb4:	d1dc      	bne.n	8002b70 <_printf_i+0x30>
 8002bb6:	2278      	movs	r2, #120	; 0x78
 8002bb8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002bbc:	496e      	ldr	r1, [pc, #440]	; (8002d78 <_printf_i+0x238>)
 8002bbe:	e064      	b.n	8002c8a <_printf_i+0x14a>
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002bc6:	1d11      	adds	r1, r2, #4
 8002bc8:	6019      	str	r1, [r3, #0]
 8002bca:	6813      	ldr	r3, [r2, #0]
 8002bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0a3      	b.n	8002d1c <_printf_i+0x1dc>
 8002bd4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002bd8:	f102 0104 	add.w	r1, r2, #4
 8002bdc:	6019      	str	r1, [r3, #0]
 8002bde:	d0d7      	beq.n	8002b90 <_printf_i+0x50>
 8002be0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	da03      	bge.n	8002bf0 <_printf_i+0xb0>
 8002be8:	222d      	movs	r2, #45	; 0x2d
 8002bea:	425b      	negs	r3, r3
 8002bec:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002bf0:	4962      	ldr	r1, [pc, #392]	; (8002d7c <_printf_i+0x23c>)
 8002bf2:	220a      	movs	r2, #10
 8002bf4:	e017      	b.n	8002c26 <_printf_i+0xe6>
 8002bf6:	6820      	ldr	r0, [r4, #0]
 8002bf8:	6819      	ldr	r1, [r3, #0]
 8002bfa:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002bfe:	d003      	beq.n	8002c08 <_printf_i+0xc8>
 8002c00:	1d08      	adds	r0, r1, #4
 8002c02:	6018      	str	r0, [r3, #0]
 8002c04:	680b      	ldr	r3, [r1, #0]
 8002c06:	e006      	b.n	8002c16 <_printf_i+0xd6>
 8002c08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c0c:	f101 0004 	add.w	r0, r1, #4
 8002c10:	6018      	str	r0, [r3, #0]
 8002c12:	d0f7      	beq.n	8002c04 <_printf_i+0xc4>
 8002c14:	880b      	ldrh	r3, [r1, #0]
 8002c16:	4959      	ldr	r1, [pc, #356]	; (8002d7c <_printf_i+0x23c>)
 8002c18:	2a6f      	cmp	r2, #111	; 0x6f
 8002c1a:	bf14      	ite	ne
 8002c1c:	220a      	movne	r2, #10
 8002c1e:	2208      	moveq	r2, #8
 8002c20:	2000      	movs	r0, #0
 8002c22:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002c26:	6865      	ldr	r5, [r4, #4]
 8002c28:	60a5      	str	r5, [r4, #8]
 8002c2a:	2d00      	cmp	r5, #0
 8002c2c:	f2c0 809c 	blt.w	8002d68 <_printf_i+0x228>
 8002c30:	6820      	ldr	r0, [r4, #0]
 8002c32:	f020 0004 	bic.w	r0, r0, #4
 8002c36:	6020      	str	r0, [r4, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d13f      	bne.n	8002cbc <_printf_i+0x17c>
 8002c3c:	2d00      	cmp	r5, #0
 8002c3e:	f040 8095 	bne.w	8002d6c <_printf_i+0x22c>
 8002c42:	4675      	mov	r5, lr
 8002c44:	2a08      	cmp	r2, #8
 8002c46:	d10b      	bne.n	8002c60 <_printf_i+0x120>
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	07da      	lsls	r2, r3, #31
 8002c4c:	d508      	bpl.n	8002c60 <_printf_i+0x120>
 8002c4e:	6923      	ldr	r3, [r4, #16]
 8002c50:	6862      	ldr	r2, [r4, #4]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	bfde      	ittt	le
 8002c56:	2330      	movle	r3, #48	; 0x30
 8002c58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c60:	ebae 0305 	sub.w	r3, lr, r5
 8002c64:	6123      	str	r3, [r4, #16]
 8002c66:	f8cd 8000 	str.w	r8, [sp]
 8002c6a:	463b      	mov	r3, r7
 8002c6c:	aa03      	add	r2, sp, #12
 8002c6e:	4621      	mov	r1, r4
 8002c70:	4630      	mov	r0, r6
 8002c72:	f7ff feef 	bl	8002a54 <_printf_common>
 8002c76:	3001      	adds	r0, #1
 8002c78:	d155      	bne.n	8002d26 <_printf_i+0x1e6>
 8002c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7e:	b005      	add	sp, #20
 8002c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c84:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002c88:	493c      	ldr	r1, [pc, #240]	; (8002d7c <_printf_i+0x23c>)
 8002c8a:	6822      	ldr	r2, [r4, #0]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002c92:	f100 0504 	add.w	r5, r0, #4
 8002c96:	601d      	str	r5, [r3, #0]
 8002c98:	d001      	beq.n	8002c9e <_printf_i+0x15e>
 8002c9a:	6803      	ldr	r3, [r0, #0]
 8002c9c:	e002      	b.n	8002ca4 <_printf_i+0x164>
 8002c9e:	0655      	lsls	r5, r2, #25
 8002ca0:	d5fb      	bpl.n	8002c9a <_printf_i+0x15a>
 8002ca2:	8803      	ldrh	r3, [r0, #0]
 8002ca4:	07d0      	lsls	r0, r2, #31
 8002ca6:	bf44      	itt	mi
 8002ca8:	f042 0220 	orrmi.w	r2, r2, #32
 8002cac:	6022      	strmi	r2, [r4, #0]
 8002cae:	b91b      	cbnz	r3, 8002cb8 <_printf_i+0x178>
 8002cb0:	6822      	ldr	r2, [r4, #0]
 8002cb2:	f022 0220 	bic.w	r2, r2, #32
 8002cb6:	6022      	str	r2, [r4, #0]
 8002cb8:	2210      	movs	r2, #16
 8002cba:	e7b1      	b.n	8002c20 <_printf_i+0xe0>
 8002cbc:	4675      	mov	r5, lr
 8002cbe:	fbb3 f0f2 	udiv	r0, r3, r2
 8002cc2:	fb02 3310 	mls	r3, r2, r0, r3
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2800      	cmp	r0, #0
 8002cd0:	d1f5      	bne.n	8002cbe <_printf_i+0x17e>
 8002cd2:	e7b7      	b.n	8002c44 <_printf_i+0x104>
 8002cd4:	6808      	ldr	r0, [r1, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	6949      	ldr	r1, [r1, #20]
 8002cda:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002cde:	d004      	beq.n	8002cea <_printf_i+0x1aa>
 8002ce0:	1d10      	adds	r0, r2, #4
 8002ce2:	6018      	str	r0, [r3, #0]
 8002ce4:	6813      	ldr	r3, [r2, #0]
 8002ce6:	6019      	str	r1, [r3, #0]
 8002ce8:	e007      	b.n	8002cfa <_printf_i+0x1ba>
 8002cea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002cee:	f102 0004 	add.w	r0, r2, #4
 8002cf2:	6018      	str	r0, [r3, #0]
 8002cf4:	6813      	ldr	r3, [r2, #0]
 8002cf6:	d0f6      	beq.n	8002ce6 <_printf_i+0x1a6>
 8002cf8:	8019      	strh	r1, [r3, #0]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	6123      	str	r3, [r4, #16]
 8002cfe:	4675      	mov	r5, lr
 8002d00:	e7b1      	b.n	8002c66 <_printf_i+0x126>
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	1d11      	adds	r1, r2, #4
 8002d06:	6019      	str	r1, [r3, #0]
 8002d08:	6815      	ldr	r5, [r2, #0]
 8002d0a:	6862      	ldr	r2, [r4, #4]
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4628      	mov	r0, r5
 8002d10:	f7fd fa66 	bl	80001e0 <memchr>
 8002d14:	b108      	cbz	r0, 8002d1a <_printf_i+0x1da>
 8002d16:	1b40      	subs	r0, r0, r5
 8002d18:	6060      	str	r0, [r4, #4]
 8002d1a:	6863      	ldr	r3, [r4, #4]
 8002d1c:	6123      	str	r3, [r4, #16]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d24:	e79f      	b.n	8002c66 <_printf_i+0x126>
 8002d26:	6923      	ldr	r3, [r4, #16]
 8002d28:	462a      	mov	r2, r5
 8002d2a:	4639      	mov	r1, r7
 8002d2c:	4630      	mov	r0, r6
 8002d2e:	47c0      	blx	r8
 8002d30:	3001      	adds	r0, #1
 8002d32:	d0a2      	beq.n	8002c7a <_printf_i+0x13a>
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	079b      	lsls	r3, r3, #30
 8002d38:	d507      	bpl.n	8002d4a <_printf_i+0x20a>
 8002d3a:	2500      	movs	r5, #0
 8002d3c:	f104 0919 	add.w	r9, r4, #25
 8002d40:	68e3      	ldr	r3, [r4, #12]
 8002d42:	9a03      	ldr	r2, [sp, #12]
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	429d      	cmp	r5, r3
 8002d48:	db05      	blt.n	8002d56 <_printf_i+0x216>
 8002d4a:	68e0      	ldr	r0, [r4, #12]
 8002d4c:	9b03      	ldr	r3, [sp, #12]
 8002d4e:	4298      	cmp	r0, r3
 8002d50:	bfb8      	it	lt
 8002d52:	4618      	movlt	r0, r3
 8002d54:	e793      	b.n	8002c7e <_printf_i+0x13e>
 8002d56:	2301      	movs	r3, #1
 8002d58:	464a      	mov	r2, r9
 8002d5a:	4639      	mov	r1, r7
 8002d5c:	4630      	mov	r0, r6
 8002d5e:	47c0      	blx	r8
 8002d60:	3001      	adds	r0, #1
 8002d62:	d08a      	beq.n	8002c7a <_printf_i+0x13a>
 8002d64:	3501      	adds	r5, #1
 8002d66:	e7eb      	b.n	8002d40 <_printf_i+0x200>
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1a7      	bne.n	8002cbc <_printf_i+0x17c>
 8002d6c:	780b      	ldrb	r3, [r1, #0]
 8002d6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d76:	e765      	b.n	8002c44 <_printf_i+0x104>
 8002d78:	08003046 	.word	0x08003046
 8002d7c:	08003035 	.word	0x08003035

08002d80 <memcpy>:
 8002d80:	b510      	push	{r4, lr}
 8002d82:	1e43      	subs	r3, r0, #1
 8002d84:	440a      	add	r2, r1
 8002d86:	4291      	cmp	r1, r2
 8002d88:	d100      	bne.n	8002d8c <memcpy+0xc>
 8002d8a:	bd10      	pop	{r4, pc}
 8002d8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d94:	e7f7      	b.n	8002d86 <memcpy+0x6>

08002d96 <memmove>:
 8002d96:	4288      	cmp	r0, r1
 8002d98:	b510      	push	{r4, lr}
 8002d9a:	eb01 0302 	add.w	r3, r1, r2
 8002d9e:	d803      	bhi.n	8002da8 <memmove+0x12>
 8002da0:	1e42      	subs	r2, r0, #1
 8002da2:	4299      	cmp	r1, r3
 8002da4:	d10c      	bne.n	8002dc0 <memmove+0x2a>
 8002da6:	bd10      	pop	{r4, pc}
 8002da8:	4298      	cmp	r0, r3
 8002daa:	d2f9      	bcs.n	8002da0 <memmove+0xa>
 8002dac:	1881      	adds	r1, r0, r2
 8002dae:	1ad2      	subs	r2, r2, r3
 8002db0:	42d3      	cmn	r3, r2
 8002db2:	d100      	bne.n	8002db6 <memmove+0x20>
 8002db4:	bd10      	pop	{r4, pc}
 8002db6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002dba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002dbe:	e7f7      	b.n	8002db0 <memmove+0x1a>
 8002dc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dc4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002dc8:	e7eb      	b.n	8002da2 <memmove+0xc>
	...

08002dcc <_free_r>:
 8002dcc:	b538      	push	{r3, r4, r5, lr}
 8002dce:	4605      	mov	r5, r0
 8002dd0:	2900      	cmp	r1, #0
 8002dd2:	d045      	beq.n	8002e60 <_free_r+0x94>
 8002dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dd8:	1f0c      	subs	r4, r1, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	bfb8      	it	lt
 8002dde:	18e4      	addlt	r4, r4, r3
 8002de0:	f000 f8d6 	bl	8002f90 <__malloc_lock>
 8002de4:	4a1f      	ldr	r2, [pc, #124]	; (8002e64 <_free_r+0x98>)
 8002de6:	6813      	ldr	r3, [r2, #0]
 8002de8:	4610      	mov	r0, r2
 8002dea:	b933      	cbnz	r3, 8002dfa <_free_r+0x2e>
 8002dec:	6063      	str	r3, [r4, #4]
 8002dee:	6014      	str	r4, [r2, #0]
 8002df0:	4628      	mov	r0, r5
 8002df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002df6:	f000 b8cc 	b.w	8002f92 <__malloc_unlock>
 8002dfa:	42a3      	cmp	r3, r4
 8002dfc:	d90c      	bls.n	8002e18 <_free_r+0x4c>
 8002dfe:	6821      	ldr	r1, [r4, #0]
 8002e00:	1862      	adds	r2, r4, r1
 8002e02:	4293      	cmp	r3, r2
 8002e04:	bf04      	itt	eq
 8002e06:	681a      	ldreq	r2, [r3, #0]
 8002e08:	685b      	ldreq	r3, [r3, #4]
 8002e0a:	6063      	str	r3, [r4, #4]
 8002e0c:	bf04      	itt	eq
 8002e0e:	1852      	addeq	r2, r2, r1
 8002e10:	6022      	streq	r2, [r4, #0]
 8002e12:	6004      	str	r4, [r0, #0]
 8002e14:	e7ec      	b.n	8002df0 <_free_r+0x24>
 8002e16:	4613      	mov	r3, r2
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	b10a      	cbz	r2, 8002e20 <_free_r+0x54>
 8002e1c:	42a2      	cmp	r2, r4
 8002e1e:	d9fa      	bls.n	8002e16 <_free_r+0x4a>
 8002e20:	6819      	ldr	r1, [r3, #0]
 8002e22:	1858      	adds	r0, r3, r1
 8002e24:	42a0      	cmp	r0, r4
 8002e26:	d10b      	bne.n	8002e40 <_free_r+0x74>
 8002e28:	6820      	ldr	r0, [r4, #0]
 8002e2a:	4401      	add	r1, r0
 8002e2c:	1858      	adds	r0, r3, r1
 8002e2e:	4282      	cmp	r2, r0
 8002e30:	6019      	str	r1, [r3, #0]
 8002e32:	d1dd      	bne.n	8002df0 <_free_r+0x24>
 8002e34:	6810      	ldr	r0, [r2, #0]
 8002e36:	6852      	ldr	r2, [r2, #4]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	4401      	add	r1, r0
 8002e3c:	6019      	str	r1, [r3, #0]
 8002e3e:	e7d7      	b.n	8002df0 <_free_r+0x24>
 8002e40:	d902      	bls.n	8002e48 <_free_r+0x7c>
 8002e42:	230c      	movs	r3, #12
 8002e44:	602b      	str	r3, [r5, #0]
 8002e46:	e7d3      	b.n	8002df0 <_free_r+0x24>
 8002e48:	6820      	ldr	r0, [r4, #0]
 8002e4a:	1821      	adds	r1, r4, r0
 8002e4c:	428a      	cmp	r2, r1
 8002e4e:	bf04      	itt	eq
 8002e50:	6811      	ldreq	r1, [r2, #0]
 8002e52:	6852      	ldreq	r2, [r2, #4]
 8002e54:	6062      	str	r2, [r4, #4]
 8002e56:	bf04      	itt	eq
 8002e58:	1809      	addeq	r1, r1, r0
 8002e5a:	6021      	streq	r1, [r4, #0]
 8002e5c:	605c      	str	r4, [r3, #4]
 8002e5e:	e7c7      	b.n	8002df0 <_free_r+0x24>
 8002e60:	bd38      	pop	{r3, r4, r5, pc}
 8002e62:	bf00      	nop
 8002e64:	20000094 	.word	0x20000094

08002e68 <_malloc_r>:
 8002e68:	b570      	push	{r4, r5, r6, lr}
 8002e6a:	1ccd      	adds	r5, r1, #3
 8002e6c:	f025 0503 	bic.w	r5, r5, #3
 8002e70:	3508      	adds	r5, #8
 8002e72:	2d0c      	cmp	r5, #12
 8002e74:	bf38      	it	cc
 8002e76:	250c      	movcc	r5, #12
 8002e78:	2d00      	cmp	r5, #0
 8002e7a:	4606      	mov	r6, r0
 8002e7c:	db01      	blt.n	8002e82 <_malloc_r+0x1a>
 8002e7e:	42a9      	cmp	r1, r5
 8002e80:	d903      	bls.n	8002e8a <_malloc_r+0x22>
 8002e82:	230c      	movs	r3, #12
 8002e84:	6033      	str	r3, [r6, #0]
 8002e86:	2000      	movs	r0, #0
 8002e88:	bd70      	pop	{r4, r5, r6, pc}
 8002e8a:	f000 f881 	bl	8002f90 <__malloc_lock>
 8002e8e:	4a23      	ldr	r2, [pc, #140]	; (8002f1c <_malloc_r+0xb4>)
 8002e90:	6814      	ldr	r4, [r2, #0]
 8002e92:	4621      	mov	r1, r4
 8002e94:	b991      	cbnz	r1, 8002ebc <_malloc_r+0x54>
 8002e96:	4c22      	ldr	r4, [pc, #136]	; (8002f20 <_malloc_r+0xb8>)
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	b91b      	cbnz	r3, 8002ea4 <_malloc_r+0x3c>
 8002e9c:	4630      	mov	r0, r6
 8002e9e:	f000 f867 	bl	8002f70 <_sbrk_r>
 8002ea2:	6020      	str	r0, [r4, #0]
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	4630      	mov	r0, r6
 8002ea8:	f000 f862 	bl	8002f70 <_sbrk_r>
 8002eac:	1c43      	adds	r3, r0, #1
 8002eae:	d126      	bne.n	8002efe <_malloc_r+0x96>
 8002eb0:	230c      	movs	r3, #12
 8002eb2:	6033      	str	r3, [r6, #0]
 8002eb4:	4630      	mov	r0, r6
 8002eb6:	f000 f86c 	bl	8002f92 <__malloc_unlock>
 8002eba:	e7e4      	b.n	8002e86 <_malloc_r+0x1e>
 8002ebc:	680b      	ldr	r3, [r1, #0]
 8002ebe:	1b5b      	subs	r3, r3, r5
 8002ec0:	d41a      	bmi.n	8002ef8 <_malloc_r+0x90>
 8002ec2:	2b0b      	cmp	r3, #11
 8002ec4:	d90f      	bls.n	8002ee6 <_malloc_r+0x7e>
 8002ec6:	600b      	str	r3, [r1, #0]
 8002ec8:	50cd      	str	r5, [r1, r3]
 8002eca:	18cc      	adds	r4, r1, r3
 8002ecc:	4630      	mov	r0, r6
 8002ece:	f000 f860 	bl	8002f92 <__malloc_unlock>
 8002ed2:	f104 000b 	add.w	r0, r4, #11
 8002ed6:	1d23      	adds	r3, r4, #4
 8002ed8:	f020 0007 	bic.w	r0, r0, #7
 8002edc:	1ac3      	subs	r3, r0, r3
 8002ede:	d01b      	beq.n	8002f18 <_malloc_r+0xb0>
 8002ee0:	425a      	negs	r2, r3
 8002ee2:	50e2      	str	r2, [r4, r3]
 8002ee4:	bd70      	pop	{r4, r5, r6, pc}
 8002ee6:	428c      	cmp	r4, r1
 8002ee8:	bf0d      	iteet	eq
 8002eea:	6863      	ldreq	r3, [r4, #4]
 8002eec:	684b      	ldrne	r3, [r1, #4]
 8002eee:	6063      	strne	r3, [r4, #4]
 8002ef0:	6013      	streq	r3, [r2, #0]
 8002ef2:	bf18      	it	ne
 8002ef4:	460c      	movne	r4, r1
 8002ef6:	e7e9      	b.n	8002ecc <_malloc_r+0x64>
 8002ef8:	460c      	mov	r4, r1
 8002efa:	6849      	ldr	r1, [r1, #4]
 8002efc:	e7ca      	b.n	8002e94 <_malloc_r+0x2c>
 8002efe:	1cc4      	adds	r4, r0, #3
 8002f00:	f024 0403 	bic.w	r4, r4, #3
 8002f04:	42a0      	cmp	r0, r4
 8002f06:	d005      	beq.n	8002f14 <_malloc_r+0xac>
 8002f08:	1a21      	subs	r1, r4, r0
 8002f0a:	4630      	mov	r0, r6
 8002f0c:	f000 f830 	bl	8002f70 <_sbrk_r>
 8002f10:	3001      	adds	r0, #1
 8002f12:	d0cd      	beq.n	8002eb0 <_malloc_r+0x48>
 8002f14:	6025      	str	r5, [r4, #0]
 8002f16:	e7d9      	b.n	8002ecc <_malloc_r+0x64>
 8002f18:	bd70      	pop	{r4, r5, r6, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000094 	.word	0x20000094
 8002f20:	20000098 	.word	0x20000098

08002f24 <_realloc_r>:
 8002f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f26:	4607      	mov	r7, r0
 8002f28:	4614      	mov	r4, r2
 8002f2a:	460e      	mov	r6, r1
 8002f2c:	b921      	cbnz	r1, 8002f38 <_realloc_r+0x14>
 8002f2e:	4611      	mov	r1, r2
 8002f30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f34:	f7ff bf98 	b.w	8002e68 <_malloc_r>
 8002f38:	b922      	cbnz	r2, 8002f44 <_realloc_r+0x20>
 8002f3a:	f7ff ff47 	bl	8002dcc <_free_r>
 8002f3e:	4625      	mov	r5, r4
 8002f40:	4628      	mov	r0, r5
 8002f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f44:	f000 f826 	bl	8002f94 <_malloc_usable_size_r>
 8002f48:	4284      	cmp	r4, r0
 8002f4a:	d90f      	bls.n	8002f6c <_realloc_r+0x48>
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	4638      	mov	r0, r7
 8002f50:	f7ff ff8a 	bl	8002e68 <_malloc_r>
 8002f54:	4605      	mov	r5, r0
 8002f56:	2800      	cmp	r0, #0
 8002f58:	d0f2      	beq.n	8002f40 <_realloc_r+0x1c>
 8002f5a:	4631      	mov	r1, r6
 8002f5c:	4622      	mov	r2, r4
 8002f5e:	f7ff ff0f 	bl	8002d80 <memcpy>
 8002f62:	4631      	mov	r1, r6
 8002f64:	4638      	mov	r0, r7
 8002f66:	f7ff ff31 	bl	8002dcc <_free_r>
 8002f6a:	e7e9      	b.n	8002f40 <_realloc_r+0x1c>
 8002f6c:	4635      	mov	r5, r6
 8002f6e:	e7e7      	b.n	8002f40 <_realloc_r+0x1c>

08002f70 <_sbrk_r>:
 8002f70:	b538      	push	{r3, r4, r5, lr}
 8002f72:	4c06      	ldr	r4, [pc, #24]	; (8002f8c <_sbrk_r+0x1c>)
 8002f74:	2300      	movs	r3, #0
 8002f76:	4605      	mov	r5, r0
 8002f78:	4608      	mov	r0, r1
 8002f7a:	6023      	str	r3, [r4, #0]
 8002f7c:	f7ff fb5c 	bl	8002638 <_sbrk>
 8002f80:	1c43      	adds	r3, r0, #1
 8002f82:	d102      	bne.n	8002f8a <_sbrk_r+0x1a>
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	b103      	cbz	r3, 8002f8a <_sbrk_r+0x1a>
 8002f88:	602b      	str	r3, [r5, #0]
 8002f8a:	bd38      	pop	{r3, r4, r5, pc}
 8002f8c:	200001f8 	.word	0x200001f8

08002f90 <__malloc_lock>:
 8002f90:	4770      	bx	lr

08002f92 <__malloc_unlock>:
 8002f92:	4770      	bx	lr

08002f94 <_malloc_usable_size_r>:
 8002f94:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	f1a0 0004 	sub.w	r0, r0, #4
 8002f9e:	bfbc      	itt	lt
 8002fa0:	580b      	ldrlt	r3, [r1, r0]
 8002fa2:	18c0      	addlt	r0, r0, r3
 8002fa4:	4770      	bx	lr
	...

08002fa8 <_init>:
 8002fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002faa:	bf00      	nop
 8002fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fae:	bc08      	pop	{r3}
 8002fb0:	469e      	mov	lr, r3
 8002fb2:	4770      	bx	lr

08002fb4 <_fini>:
 8002fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb6:	bf00      	nop
 8002fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fba:	bc08      	pop	{r3}
 8002fbc:	469e      	mov	lr, r3
 8002fbe:	4770      	bx	lr
